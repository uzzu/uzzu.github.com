<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uzzu::Blog</title>
  <subtitle>Software Design, and my life.</subtitle>
  <id>http://uzzu.github.io</id>
  <link href="http://uzzu.github.io"/>
  <link href="http://uzzu.github.iofeed.xml" rel="self"/>
  <updated>2014-01-03T23:53:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>ドメインを巡るお話</title>
    <link rel="alternate" href="/blog/20140104/think-domain-driven.html"/>
    <id>/blog/20140104/think-domain-driven.html</id>
    <published>2014-01-03T23:53:00Z</published>
    <updated>2014-01-03T23:53:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;昨年末にだらだらDCIに関する自分の考えを整理したくて身内で話していて、&lt;br&gt;
結論としては「DDDとDCIどちらもメンタルモデルに近づけるために機能してる点は変わらない。その先DDDあるいはDCIをフレームワークにするか、あるいは一部に取り入れるのか、そこは取組むドメインによって取捨選択だよね」というところに落ち着いたのだけれど、勿体無い内容な気がするので改めてブログに書くことにする。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;昨年末にだらだらDCIに関する自分の考えを整理したくて身内で話していて、&lt;br&gt;
結論としては「DDDとDCIどちらもメンタルモデルに近づけるために機能してる点は変わらない。その先DDDあるいはDCIをフレームワークにするか、あるいは一部に取り入れるのか、そこは取組むドメインによって取捨選択だよね」というところに落ち着いたのだけれど、勿体無い内容な気がするので改めてブログに書くことにする。
&lt;/p&gt;

&lt;h3 id="toc_0"&gt;DDD脳から見たDCIの考察&lt;/h3&gt;

&lt;p&gt;DCIはFATなドメインモデルに対するアプローチというよりは、シナリオを明確にするためのアプローチなのかなと思う。&lt;br&gt;
DDDを実践するような複雑な問題に直面した時、ドメインモデルは山のように増える。より知識を噛み砕いてドメインモデルにしたほうがより上層のロジックが簡潔になるので積極的にドメインモデルに落とし込む方がよく、結果として、シナリオを満たす為のAggregateも増えに増える事が分かった。知識がそのままモデルになるので、量に対する抵抗はなかった。しかし、Aggregateのインターフェースがどういうシナリオに対して提供されているか、&amp;#39;蒸留&amp;#39;の工程で改めて俯瞰して見ると不明瞭だという事に気づいた。&lt;br&gt;
実運用フローとして、DDDではシナリオが追加された時、まずドメインモデルがシナリオをクリアする事ができるかを評価する。 本来、シナリオに対して必要なロールは一意に紐付けられるはずが、様々なシナリオをクリアしてきた結果、 シナリオを満たす事ができないAggregateのインターフェースも眺める事になる。こういう状況では、ドメインモデルの評価が完了するにはいくらエキスパートといえどそれなりに時間がかかってしまうのではないだろうか？&lt;br&gt;
この状況を打破すべくシナリオをドメインモデル(Context)に、AggregateのインターフェースをRoleに昇格させて、よりメンタルモデルに近付け、評価すべきドメインモデルをより限定的にする為に、DCIを組み込むというのあり、というか相性が良いかなーという風に考えてる。&lt;br&gt;
DDDとDCI併用しろとかそういう話ではないのだけれど、上記のような事を考えていると、DDDに加えてさらにDCIを適用しなければならない状況に陥るのは、そんなにないと思う。そもそもDDDを実践する事自体、複雑な問題領域でなければやらない。幸にも自分は今ゲーム開発に携わっているのでその点困ってはいないが、他の業種ではそうでもないかもしれない。それに加えて、蒸留によってコアドメインからサブドメインを定義し分離するアプローチをとる事もあり得る。さらに言うと、現実解としてDCIを選択・採用するというのは、現在のプログラマの知識レベルから考えるに難しいと思う。僕自身、設計に正解は無いとはいえど、DDDについてはゴールイメージがある程度想像できるようになり、今の仕事でも実践し、人に伝えられる(うまく伝わっているかはまだ定かではない)ようには理解が進んでいるけれど、DCIについてはまだゴールイメージが湧いていない。  &lt;/p&gt;

&lt;h3 id="toc_1"&gt;DCIとServiceとドメイン&lt;/h3&gt;

&lt;p&gt;そんな考えを張り巡らせていると&lt;a href="https://twitter.com/j5ik2o"&gt;@j5ik2o&lt;/a&gt;氏からこんな回答を頂いた。とてもありがたい。
&lt;blockquote&gt;ボクは、DDDでいうドメインサービスやアプリケーションサービスの中には、エンティティや値オブジェクトに、本来あるべき役割が埋没している可能性があるのではないか、と思っています。
たとえば、口座間のお金の転送だって、口座間転送サービスとせずに、口座間転送という場面において、口座はそれぞれ送金元、送金先という役割を持っているのでは、と思うんですよね。ただ、場面を意識せずに、口座エンティティにそのまま振る舞いを配置してしまうと不自然になる(DDDだとこの時点でサービスにいく。これは悪いというわけではなく現実解だと思ってる)んだけど、場面を意識して適切なロールをドメインオブジェクトに合成すれば、メンタルモデルに合っているかもしれないと思うようになりました。これはEricのユビキタス言語パターンにも反しないはずです。&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;加えて、年明けにDCIとServiceを巡る記事が投稿された。素晴らしい。必読だと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.yuyat.jp/archives/2330"&gt;Ruby/Rails 用 DI コンテナ Dee をつくった、あるいは Ruby のカルチャーについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rosylilly.hatenablog.com/entry/2014/01/02/104732"&gt;DCI なんて面倒なだけで Service 使えばいい』への返答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://togetter.com/li/610993"&gt;DCI/Serviceをめぐる話題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://j5ik2o.me/blog/2014/01/03/dci-service/"&gt;ServiceとDCIについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕自身の考えは概ね&lt;a href="https://twitter.com/j5ik2o"&gt;@j5ik2o&lt;/a&gt;氏に同じなので違う視点で話す。&lt;br&gt;
ドメインという言葉自体が曖昧なので大きく2つに分けると、アプリケーションの問題領域を指すアプリケーションドメインと、アプリケーションを実現する基盤となるソリューションドメインがある。ServiceだのDCIだの言われているけれど、なぜここに若干の亀裂があるのかと考えると、 アプリケーションドメインに対するアプローチとして、アプリケーションドメインそのものを中心に捉えているか、ソリューションドメインに偏って捉えているか、という思想の食い違いにあるのではないかなと思う。&lt;br&gt;
DDDで語られるドメインは概ねアプリケーションドメインを指しており、そのアプローチは、問題領域そのものに着目し、アプリケーションドメインの知識を噛み砕いてユビキタス言語を構築し、会話し、それをドメインモデルとし、複雑な問題をドメインモデルが解決する、というように、アプリケーションドメインを中心に捉えていると理解している。&lt;br&gt;
反対に、ソリューションドメインに偏って捉えるというのはどうことかというと、実現する言語、フレームワーク、ライブラリ等、解決手段を中心に問題の解決を図るということである。偏った、とかいう言い方をするのは決して否定しているわけではなく、僕自身、経験則とか現実解として、これはサブドメイン/ソリューションドメインとして切り出せるだろうな、というものは早期に切り出してモジュール/ライブラリ化することもある。ただし、目的はあくまでもアプリケーションのコアドメインを隔離する為である。&lt;br&gt;
本来アプリケーションドメインとソリューションドメインは一致していることが望ましい。モジュール/ライブラリはアプリケーションそのものではない。目的が本来解決すべきアプリケーションドメインから遠ざかってしまう。よくプログラマが脱線してコード書きまくるのは大体新たな問題を発見してしまったからだよね、という余談はさておき、何が言いたいかというと、ソリューションドメインに偏ったアプローチはアプリケーションが本来抱えている問題を見失う可能性が高く、その回避策として、気をつけなきゃならない事(改善プロセスetc&amp;hellip;)が増えたり等、結果的に仕事を増やしているだけかもしれないので、一旦立ち止まって、今携わっているアプリケーションを振り返ってみて欲しい。  &lt;/p&gt;

&lt;h3 id="toc_2"&gt;Serviceという単語が曖昧だという話&lt;/h3&gt;

&lt;p&gt;世間一般的に語られているServiceは、純粋人工物としてのServiceだったり、PoEAAのService(Layer)だったりする。これら2つにも更に分類できて、利用者への操作セットを提供する(Domain|Application|etc&amp;hellip;)FacadeとしてのServiceと、アプリケーションロジックを実装するOperationScriptとしてのServiceがある。&lt;br&gt;
ServiceがDDDで語られるServiceであるとするならば、それは会話の中で生まれたアプリケーションドメインの知識の1つなので、アプリケーションドメインを中心に捉えられているといえるであろうが、それ以外だとするならば、アプリケーションドメインの知識であるとは限らない。例えば、フレームワークとしてたまたまsuffixにServiceとついているだけとか、アノテーションとして付いているだけで、そのオブジェクトの責務が予測できないかもしれない。&lt;br&gt;
仮に目的が同じだとしても、結果としてプログラマがコードから受け取る印象はまちまちであり、DDD的にはこういうのを「コンテキスト境界」を超えている、なんて言ったりするのだけれど、それはさておき、Serviceというワードは曖昧で、UtilsとかManagerとかcheck*とか、かつて抽象的だと嫌ってきたものと同等なので、有識者の方々にはServiceという単語を使うときはもう少し気を遣ってもらいたいなと思う。  &lt;/p&gt;

&lt;h3 id="toc_3"&gt;上記内容を理解するためにオススメな本&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/4894716828/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4894716828&amp;linkCode=as2&amp;tag=himeatball-22"&gt;実践UML&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DDDのServiceの由来はこの本に記載されているGRASPパターン(責務駆動の原理原則に相当する)を継承している。&lt;/li&gt;
&lt;li&gt;分厚い本なので振り回さないようにするか電子化しましょう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/4798105538/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4798105538&amp;linkCode=as2&amp;tag=himeatball-22"&gt;PoEAA&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ServiceLayerを改めて振り返るなら是非。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/4894715287/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4894715287&amp;linkCode=as2&amp;tag=himeatball-22"&gt;マルチパラダイムデザイン&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ソリューションドメインって何？なったらどうぞ。&lt;/li&gt;
&lt;li&gt;この本で語られるドメインは半分くらいソリューションドメイン。&lt;/li&gt;
&lt;li&gt;個人的にはようやくこの本が必要とされる時が来たかと歓喜している。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/B00GRKD6XU/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00GRKD6XU&amp;linkCode=as2&amp;tag=himeatball-22"&gt;エリック・エヴァンスのドメイン駆動設計&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どうぞ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_4"&gt;年明けからソフトウェア設計の話で盛り上がるなんて&lt;/h3&gt;

&lt;p&gt;2014年は楽しい年になりそうですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>流行りのdotfiles運用をゲストOSとホストOS(Windows7)で共有する</title>
    <link rel="alternate" href="/blog/20130116/host-win7-and-guest-os-share-environment-of-dotfiles.html"/>
    <id>/blog/20130116/host-win7-and-guest-os-share-environment-of-dotfiles.html</id>
    <published>2013-01-16T07:41:00Z</published>
    <updated>2013-01-16T07:41:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;ようやく流行りのdotfiles運用に乗っけました。 dotfiles運用は本当に快適で、幸福に満ち溢れています。
Windowsって本当にかわいいですよね。痒いところに手が届かないところがすごい好きです。現状、日常のほとんどの作業はゲストOSであるところのUbuntu上で行っているので、ホストOSであるWindows7をほとんど触っていないのですが、とはいえ、どうしてもWindows上で作業した方が早いケースがあったり、 Windows上にしかインストールできないソフトウェアがあることがまああるわけで、そういういざという時に最低限の編集が可能が環境がWindows上に存在しない、もしくは差異があるというのはいささか不便であります。&lt;br&gt;
で、この問題をどうしようかなと調べてたわけですが…&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;ようやく流行りのdotfiles運用に乗っけました。 dotfiles運用は本当に快適で、幸福に満ち溢れています。
Windowsって本当にかわいいですよね。痒いところに手が届かないところがすごい好きです。現状、日常のほとんどの作業はゲストOSであるところのUbuntu上で行っているので、ホストOSであるWindows7をほとんど触っていないのですが、とはいえ、どうしてもWindows上で作業した方が早いケースがあったり、 Windows上にしかインストールできないソフトウェアがあることがまああるわけで、そういういざという時に最低限の編集が可能が環境がWindows上に存在しない、もしくは差異があるというのはいささか不便であります。&lt;br&gt;
で、この問題をどうしようかなと調べてたわけですが…
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tinyurl.com/ao2fw9n"&gt;Mklink&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いつのまに標準でシンボリックリンク作成できるようになったんですね。&lt;br&gt;
Windows7からなんですね。知識がまったく追いついていません。&lt;br&gt;
ハードリンクとjunctionにありがとう、fsutilにありがとう。&lt;/p&gt;

&lt;p&gt;というわけでLinux環境同様にdotfilesの各ファイルに対するシンボリックリンクを貼る&lt;br&gt;
Windows7用のbatchfileを書きました。
&lt;script src="https://gist.github.com/4545401.js?file=dotlink.bat"&gt;&lt;/script&gt;
注意点としては、&lt;br&gt;
mklinkコマンドが管理者権限で実行する必要があるので&lt;br&gt;
このbatchfileも管理者権限で実行しないとエラー吐きまくって終了するぐらいです。  &lt;/p&gt;

&lt;p&gt;あとはホストOSのHOMEディレクトリをゲストOSにマウントすれば&lt;br&gt;
大体ゲストOSからホストOSとあんなことやこんなことができていい感じですね。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;結論&lt;/h2&gt;

&lt;p&gt;そろそろ本当にMacBook+iOSに移行したいので、AppleさんにはWWDC2013で誠意を見せていただきたい所存&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>FlexUnit4でStageに依存するテストを書く</title>
    <link rel="alternate" href="/blog/20130109/stage-reference-in-flexunit4.html"/>
    <id>/blog/20130109/stage-reference-in-flexunit4.html</id>
    <published>2013-01-09T04:03:00Z</published>
    <updated>2013-01-09T04:03:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;FlexUnit4を利用する上でflash.display.Stageに依存する処理のテストを書きたいんだけど、&lt;br&gt;
TestクラスからどうやってStageオブジェクトを参照したりStageからのイベントを送出したら良いか分からない!&lt;br&gt;
a)力技な方法と、b)fluintの機能を利用する方法があります。後者をおすすめします。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;FlexUnit4を利用する上でflash.display.Stageに依存する処理のテストを書きたいんだけど、&lt;br&gt;
TestクラスからどうやってStageオブジェクトを参照したりStageからのイベントを送出したら良いか分からない!&lt;br&gt;
a)力技な方法と、b)fluintの機能を利用する方法があります。後者をおすすめします。
&lt;/p&gt;

&lt;h3 id="toc_0"&gt;a)力技な方法&lt;/h3&gt;

&lt;p&gt;entry-pointとなるTestRunnerクラスのコンストラクタかonCreationCompleteあたりで&lt;br&gt;
flash.display.DisplayObjectContainerを継承するクラス(Sprite, MovieClip, UIComponent, etc&amp;hellip;)のオブジェクトを生成し、&lt;br&gt;
addChildしてやるなどしたあと、&lt;br&gt;
そのオブジェクトを任意のクラスのプロパティとして保持します。&lt;br&gt;
おおよそこんな感じです。
&lt;script src="https://gist.github.com/4491370.js?file=ATestRunner.mxml"&gt;&lt;/script&gt;
&lt;script src="https://gist.github.com/4491370.js?file=ATestContext.as"&gt;&lt;/script&gt;
ってやっとけばTestクラスでは
&lt;script src="https://gist.github.com/4491370.js?file=ATest.as"&gt;&lt;/script&gt;
とできます。力技ですね。&lt;/p&gt;

&lt;h3 id="toc_1"&gt;b)Fluintの機能を利用する&lt;/h3&gt;

&lt;p&gt;fluintに含まれるorg.fluint.uiImpersonationパッケージの諸々のクラスを利用します。&lt;br&gt;
実装を追うとおおよそ上とやっている事は変わらないのですが、&lt;br&gt;
あらゆる環境でのテストコードの保守を考えると&lt;br&gt;
こちらを利用しておくのがbetterです。&lt;/p&gt;

&lt;p&gt;a) の方法と途中まで(適当なDisplayObjectContainerをaddChildするところまで)は同じです。
&lt;script src="https://gist.github.com/4491795.js?file=BTestRunner.mxml"&gt;&lt;/script&gt;
VisualEnvironmentBuilderに対してDisplayObjectContainerを設定することで、&lt;br&gt;
以降テストクラスからは、org.fluint.uiImpersonation.UIImpersonatorクラスの各メソッドを介して&lt;br&gt;
アクセスすることができます。  &lt;/p&gt;

&lt;p&gt;実際のテストコード中での利用方法はこんな感じです。
&lt;script src="https://gist.github.com/4491795.js?file=BTest.as"&gt;&lt;/script&gt;
利用する際に、注意点が2点あります。&lt;/p&gt;

&lt;h3 id="toc_2"&gt;DisplayObjectContainerクラスの提供するインターフェースがすべて提供される訳ではない&lt;/h3&gt;

&lt;p&gt;UIImpersonatorのインターフェースはで定義されているメソッドは以下のメソッドだけです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;addChild()&lt;/li&gt;
&lt;li&gt;addChildAt()&lt;/li&gt;
&lt;li&gt;removeChild()&lt;/li&gt;
&lt;li&gt;removeChildAt()&lt;/li&gt;
&lt;li&gt;removeAllChildren()&lt;/li&gt;
&lt;li&gt;getChildAt()&lt;/li&gt;
&lt;li&gt;getChildByName()&lt;/li&gt;
&lt;li&gt;getChildIndex()&lt;/li&gt;
&lt;li&gt;setChildIndex()&lt;/li&gt;
&lt;li&gt;numChildren&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくは、&lt;a href="http://docs.flexunit.org/index.php?title=UIImpersonator"&gt;http://docs.flexunit.org/index.php?title=UIImpersonator&lt;/a&gt;を参考にしてください。&lt;br&gt;
回避方法はあるんですがまあエレガントではないのでここでは紹介しません。&lt;br&gt;
ソースコードを読んでください。&lt;/p&gt;

&lt;h3 id="toc_3"&gt;UIImpersonatorクラスのメソッドによって操作されるオブジェクトは、実行環境によって変化する&lt;/h3&gt;

&lt;p&gt;事前に設定されたDisplayObjectContainerではありません。&lt;br&gt;
それを親表示オブジェクトとするDisplayObjectContainerが実際に操作されます。&lt;br&gt;
そのDisplayObjectContainerは、実行環境によって変化します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flex環境外では、flash.display.Sprite&lt;/li&gt;
&lt;li&gt;flex環境では、mx.core.Container -&gt; spark.components.Groupの優先順位で確定&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_4"&gt;FlexMojosでは&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/uzzu/flexunithelper"&gt;flexunithelper&lt;/a&gt;というライブラリを作りました。
これを使うと、上記の問題を少ない記述量でよしなに解決してくれます。=&amp;gt;&lt;a href="https://github.com/uzzu/flexunithelper/blob/master/flexunithelper/src/test/flex/org/uzzu/flexunithelper/UtilitiesTest.as"&gt;Example&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>テスト</title>
    <link rel="alternate" href="/blog/20120930/test.html"/>
    <id>/blog/20120930/test.html</id>
    <published>2012-09-30T12:46:00Z</published>
    <updated>2012-09-30T12:46:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;麻婆豆腐&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ほむ&lt;/li&gt;
&lt;li&gt;ほむほむ&lt;/li&gt;
&lt;li&gt;ほむほむほむ&lt;/li&gt;
&lt;/ul&gt;
</summary>
    <content type="html">&lt;p&gt;麻婆豆腐&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ほむ&lt;/li&gt;
&lt;li&gt;ほむほむ&lt;/li&gt;
&lt;li&gt;ほむほむほむ&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
