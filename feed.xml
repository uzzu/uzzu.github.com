<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uzzu::Blog</title>
  <subtitle>Software Design, and my life.</subtitle>
  <id>http://uzzu.github.io</id>
  <link href="http://uzzu.github.io"/>
  <link href="http://uzzu.github.iofeed.xml" rel="self"/>
  <updated>2018-12-18T15:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Distilling VIPER pattern</title>
    <link rel="alternate" href="/blog/20181219/distilling-viper-architecture.html"/>
    <id>/blog/20181219/distilling-viper-architecture.html</id>
    <published>2018-12-18T15:00:00Z</published>
    <updated>2018-12-18T15:00:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;この記事は&lt;a href="https://qiita.com/advent-calendar/2018/ddd"&gt;ドメイン駆動設計 #1 Advent Calendar 2018&lt;/a&gt; 19日目の記事です。&lt;/p&gt;

&lt;p&gt;何かとDDDの話はサーバサイドエンジニアの話として取り上げられます。
それもそのはず、サービスの根幹となるビジネスドメインのロジックはサーバサイド上組まれる事が多い事にあると思います。
ではクライアントサイドは関係ないのかというとそんな事はなくて、Layered Architectureのように部分的にDDDの戦術的なエッセンスを導入する事はさることながら、サーバAPIがGraphQL、RESTful API、CQRS+ESなアーキテクチャであれば同様にそれらに適した設計を検討する必要があります。ましてや、ゲーム開発ではより多角的に全く別のアプローチを取る事があります。
つまり、開発するクライアントそのものの要件、規模、周辺環境(サーバサイド周辺技術等)の進化に合わせて、現在適用している設計パターンそのものを蒸留し、戦略的に進化させ続ける必要があります。問題領域(ドメイン)はどこにでもあるし、それは技術的なフレームワークにも当てはまります。Evans本16章、17章あたりの話です。&lt;/p&gt;

&lt;p&gt;一方で、構築するサービス全体を俯瞰して捉えた場合、クライアントはサーバサイドから見てDTOを橋渡し役として境界が分かれた状況にあります。
現実的な話をすれば、蒸留という行為自体独立して必要に応じてやればいい、やっていくだけという話なのですが、それで結論づけてしまうと元も子もないのと、必要なタイミングで懐刀がないというのはよろしくないですし、クライアントアプリケーションをよりより素早く、より漸進的な設計で形にするヒントが隠されているかもしれません。&lt;/p&gt;

&lt;p&gt;まだ検証段階なのですが(本当はAdvent Calendarに間に合わせたかったけど無理があった)、クライアント設計パターンの1つである所のVIPERを蒸留することでいくつか見えてきた事があるので、書き残しておきます。&lt;/p&gt;

&lt;p&gt;DDD関連用語: 蒸留、宣言的設計、進化する秩序、戦略的設計&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;この記事は&lt;a href="https://qiita.com/advent-calendar/2018/ddd"&gt;ドメイン駆動設計 #1 Advent Calendar 2018&lt;/a&gt; 19日目の記事です。&lt;/p&gt;

&lt;p&gt;何かとDDDの話はサーバサイドエンジニアの話として取り上げられます。
それもそのはず、サービスの根幹となるビジネスドメインのロジックはサーバサイド上組まれる事が多い事にあると思います。
ではクライアントサイドは関係ないのかというとそんな事はなくて、Layered Architectureのように部分的にDDDの戦術的なエッセンスを導入する事はさることながら、サーバAPIがGraphQL、RESTful API、CQRS+ESなアーキテクチャであれば同様にそれらに適した設計を検討する必要があります。ましてや、ゲーム開発ではより多角的に全く別のアプローチを取る事があります。
つまり、開発するクライアントそのものの要件、規模、周辺環境(サーバサイド周辺技術等)の進化に合わせて、現在適用している設計パターンそのものを蒸留し、戦略的に進化させ続ける必要があります。問題領域(ドメイン)はどこにでもあるし、それは技術的なフレームワークにも当てはまります。Evans本16章、17章あたりの話です。&lt;/p&gt;

&lt;p&gt;一方で、構築するサービス全体を俯瞰して捉えた場合、クライアントはサーバサイドから見てDTOを橋渡し役として境界が分かれた状況にあります。
現実的な話をすれば、蒸留という行為自体独立して必要に応じてやればいい、やっていくだけという話なのですが、それで結論づけてしまうと元も子もないのと、必要なタイミングで懐刀がないというのはよろしくないですし、クライアントアプリケーションをよりより素早く、より漸進的な設計で形にするヒントが隠されているかもしれません。&lt;/p&gt;

&lt;p&gt;まだ検証段階なのですが(本当はAdvent Calendarに間に合わせたかったけど無理があった)、クライアント設計パターンの1つである所のVIPERを蒸留することでいくつか見えてきた事があるので、書き残しておきます。&lt;/p&gt;

&lt;p&gt;DDD関連用語: 蒸留、宣言的設計、進化する秩序、戦略的設計&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;この話を始める前に、クライアントアプリケーション設計パターンに触れる必要があります。
MVP(+Passive View or Supervising Controller)、MVVM、MVI、Flux、VIPERといった近年よく見られるスマートフォンアプリ開発で採用される設計パターンはいずれもメリット/デメリットがあり、規模や開発チームの習熟度、作成するアプリケーションのビジネスの方向性に合わせて適用される必要があり、これが絶対というものはありません。共通して言えることは、特定のclassないしfunctionに責務を与え、ソースコードに秩序をもたらしている、ということです。&lt;/p&gt;

&lt;p&gt;今回はVIPERをベースに書きます。
余談ですが、個人的には、VIPERパターンを採用する事が多いです。理由としては、実装が面倒と思われてしまう箇所があるものの、素朴であり、VIPERパターンを実現するフレームワーク実装のソースコードは0byte(つまり不要)、現代のGUIアプリケーション開発の現状を踏まえた上で最低限の責務分離がされている事、クライアント上で必要な要件がinterfaceとして可視化されている事、且つ未来に向けての秩序の進化をしやすい、といった所です。蒸留とミニマリズムはどんな優れた設計にも欠かせないものですが、戦略的設計にとってはミニマリズムはより一層重要です(Evans本第17章より)。&lt;/p&gt;

&lt;p&gt;VIPERパターンではMVP + Passive ViewにおいてP(Presenter)で曖昧に責務を持っていたApplication LogicをI(Interactor)に、そして画面遷移にまつわる責務をR(Routing)に持たせ、Presenterをglue layerに特化し、かつこれら一連の責務をContract interfaceとして定義します。
Presenterは時としてViewの代わりにViewModelを持つ事がありますが、いずれにしてもUIの用語は入りません。
Routingについては本記事では省略します。&lt;/p&gt;

&lt;p&gt;VIPERパターンの弱点として、処理フローを担保していないというものがあります。
その為、Presenterの実装についてはやはり開発者を慣れるまで悩ませる事になります。Application LogicやUI logicをPresenterに記述してしまったり。
単一方向の処理フローに着目したFluxやMVIが流行る理由も分かるなあという気持ちです。&lt;/p&gt;

&lt;p&gt;そんなVIPERパターンですが、大規模なアプリケーションにおいてVIPERを軸にコーディングガイドラインを設け、コードレビューやチーム内での議論を通して真摯に向き合った結果、Presenter methodの実装は100%テンプレコードになっています。&lt;/p&gt;
&lt;pre class="highlight text"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;div class="lineno"&gt;2&lt;/div&gt;&lt;div class="lineno"&gt;3&lt;/div&gt;&lt;div class="lineno"&gt;4&lt;/div&gt;&lt;div class="lineno"&gt;5&lt;/div&gt;&lt;div class="lineno"&gt;6&lt;/div&gt;&lt;div class="lineno"&gt;7&lt;/div&gt;&lt;div class="lineno"&gt;8&lt;/div&gt;&lt;div class="lineno"&gt;9&lt;/div&gt;&lt;div class="lineno"&gt;10&lt;/div&gt;&lt;div class="lineno"&gt;11&lt;/div&gt;&lt;div class="lineno"&gt;12&lt;/div&gt;&lt;div class="lineno"&gt;13&lt;/div&gt;&lt;div class="lineno"&gt;14&lt;/div&gt;&lt;div class="lineno"&gt;15&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;
// Rxの場合
interactor.doSomething()
    .subscribeOn(/**/)
    .observeOn(/**/)
    .subscribe(view::render, view::render)
    .addTo(disposables)

// Kotlin Coroutinesの場合
launch {
    runCatching { withContext(/**/) { interactor.doSomething() }
        .onSuccess(view::render)
        .onFailure(view::render)
}

&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;
&lt;p&gt;Interactorは引数を元に結果を返すだけになり、Viewは与えられた引数、あるいは(上記コードをViewModelを利用する形に置換した上で)ViewModelの変更を購読し描画するだけになります。&lt;/p&gt;

&lt;p&gt;これは大きな成果で、Presenter(glue layer)の実装は機械的に生成できる事を意味しています。
では、何を軸にPresenterを機械的に生成したら良いのでしょうか。&lt;/p&gt;

&lt;p&gt;ここで着目したのはSide-Effect-Free FunctionやCQSの考え方です。
問い合わせと変更を分離して副作用の心配を取り除くのが同パターンの趣旨ではありますが、
これを逆に考えて、CommandとQueryからクライアント設計の契約(Contract)を導きだす事ができないかというのを考えました。&lt;/p&gt;

&lt;p&gt;例えば(一部省略しつつも)以下のようなCommandとQueryの定義を書いたとします。&lt;/p&gt;
&lt;pre class="highlight text"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;div class="lineno"&gt;2&lt;/div&gt;&lt;div class="lineno"&gt;3&lt;/div&gt;&lt;div class="lineno"&gt;4&lt;/div&gt;&lt;div class="lineno"&gt;5&lt;/div&gt;&lt;div class="lineno"&gt;6&lt;/div&gt;&lt;div class="lineno"&gt;7&lt;/div&gt;&lt;div class="lineno"&gt;8&lt;/div&gt;&lt;div class="lineno"&gt;9&lt;/div&gt;&lt;div class="lineno"&gt;10&lt;/div&gt;&lt;div class="lineno"&gt;11&lt;/div&gt;&lt;div class="lineno"&gt;12&lt;/div&gt;&lt;div class="lineno"&gt;13&lt;/div&gt;&lt;div class="lineno"&gt;14&lt;/div&gt;&lt;div class="lineno"&gt;15&lt;/div&gt;&lt;div class="lineno"&gt;16&lt;/div&gt;&lt;div class="lineno"&gt;17&lt;/div&gt;&lt;div class="lineno"&gt;18&lt;/div&gt;&lt;div class="lineno"&gt;19&lt;/div&gt;&lt;div class="lineno"&gt;20&lt;/div&gt;&lt;div class="lineno"&gt;21&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;
interface ProductsDefinition {
    data class Product(
        val productId: ProductId,
        val title: ProductTitle,
        val price: Price,
        val description: Description
    )

    sealed class PurchaseProductEvent(
        private val productId: ProductId
    ) {
        data class Purchased(productId: ProductId) : PurchaseProductEvent(productId)
        data class Unavailable(productId: ProductId) : PurchaseProductEvent(productId)
    }

    class AllProducts(): Query&amp;lt;List&amp;lt;Product&amp;gt;&amp;gt;
    class ProductsByKeyword(keyword: Keyword): Query&amp;lt;List&amp;lt;Product&amp;gt;&amp;gt;
    class Purchase(productId: ProductId): Command&amp;lt;PurchaseProductEvent&amp;gt;
}

&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;
&lt;p&gt;上記コードを読む際に気をつけて欲しいのは、PurchaseProductEventはUI domainのDomainEventである点です。
UI DomainのDomainEventとBusiness DomainのDomainEventは一致しません。
いっそStateと呼んだ方が最近の言葉遣いにはあってるかもなーと思いつつこのままにしておきます。&lt;/p&gt;

&lt;p&gt;上記のDefinitinon interfaceから、以下のコードを生成できます。(命名はやりすぎ感が否めませんが…)&lt;/p&gt;
&lt;pre class="highlight text"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;div class="lineno"&gt;2&lt;/div&gt;&lt;div class="lineno"&gt;3&lt;/div&gt;&lt;div class="lineno"&gt;4&lt;/div&gt;&lt;div class="lineno"&gt;5&lt;/div&gt;&lt;div class="lineno"&gt;6&lt;/div&gt;&lt;div class="lineno"&gt;7&lt;/div&gt;&lt;div class="lineno"&gt;8&lt;/div&gt;&lt;div class="lineno"&gt;9&lt;/div&gt;&lt;div class="lineno"&gt;10&lt;/div&gt;&lt;div class="lineno"&gt;11&lt;/div&gt;&lt;div class="lineno"&gt;12&lt;/div&gt;&lt;div class="lineno"&gt;13&lt;/div&gt;&lt;div class="lineno"&gt;14&lt;/div&gt;&lt;div class="lineno"&gt;15&lt;/div&gt;&lt;div class="lineno"&gt;16&lt;/div&gt;&lt;div class="lineno"&gt;17&lt;/div&gt;&lt;div class="lineno"&gt;18&lt;/div&gt;&lt;div class="lineno"&gt;19&lt;/div&gt;&lt;div class="lineno"&gt;20&lt;/div&gt;&lt;div class="lineno"&gt;21&lt;/div&gt;&lt;div class="lineno"&gt;22&lt;/div&gt;&lt;div class="lineno"&gt;23&lt;/div&gt;&lt;div class="lineno"&gt;24&lt;/div&gt;&lt;div class="lineno"&gt;25&lt;/div&gt;&lt;div class="lineno"&gt;26&lt;/div&gt;&lt;div class="lineno"&gt;27&lt;/div&gt;&lt;div class="lineno"&gt;28&lt;/div&gt;&lt;div class="lineno"&gt;29&lt;/div&gt;&lt;div class="lineno"&gt;30&lt;/div&gt;&lt;div class="lineno"&gt;31&lt;/div&gt;&lt;div class="lineno"&gt;32&lt;/div&gt;&lt;div class="lineno"&gt;33&lt;/div&gt;&lt;div class="lineno"&gt;34&lt;/div&gt;&lt;div class="lineno"&gt;35&lt;/div&gt;&lt;div class="lineno"&gt;36&lt;/div&gt;&lt;div class="lineno"&gt;37&lt;/div&gt;&lt;div class="lineno"&gt;38&lt;/div&gt;&lt;div class="lineno"&gt;39&lt;/div&gt;&lt;div class="lineno"&gt;40&lt;/div&gt;&lt;div class="lineno"&gt;41&lt;/div&gt;&lt;div class="lineno"&gt;42&lt;/div&gt;&lt;div class="lineno"&gt;43&lt;/div&gt;&lt;div class="lineno"&gt;44&lt;/div&gt;&lt;div class="lineno"&gt;45&lt;/div&gt;&lt;div class="lineno"&gt;46&lt;/div&gt;&lt;div class="lineno"&gt;47&lt;/div&gt;&lt;div class="lineno"&gt;48&lt;/div&gt;&lt;div class="lineno"&gt;49&lt;/div&gt;&lt;div class="lineno"&gt;50&lt;/div&gt;&lt;div class="lineno"&gt;51&lt;/div&gt;&lt;div class="lineno"&gt;52&lt;/div&gt;&lt;div class="lineno"&gt;53&lt;/div&gt;&lt;div class="lineno"&gt;54&lt;/div&gt;&lt;div class="lineno"&gt;55&lt;/div&gt;&lt;div class="lineno"&gt;56&lt;/div&gt;&lt;div class="lineno"&gt;57&lt;/div&gt;&lt;div class="lineno"&gt;58&lt;/div&gt;&lt;div class="lineno"&gt;59&lt;/div&gt;&lt;div class="lineno"&gt;60&lt;/div&gt;&lt;div class="lineno"&gt;61&lt;/div&gt;&lt;div class="lineno"&gt;62&lt;/div&gt;&lt;div class="lineno"&gt;63&lt;/div&gt;&lt;div class="lineno"&gt;64&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;
interface ProductsContract {
    interface View {
        fun render(products: List&amp;lt;Product&amp;gt;)
        fun render(event: PurchaseProductEvent)
        fun render(e: Throwable)
    }

    interface QueryHandler {
        suspend fun whenever(query: AllProducts): List&amp;lt;Product&amp;gt;
        suspend fun whenever(query: ProductsByKeyword): List&amp;lt;Product&amp;gt;
    }

    interface CommandHandler {
        suspend fun whenever(command: Purchase): PurchaseProductEvent
    }

    interface Interactor: QueryHandler, CommandHandler

    interface Presenter {
        fun given(query: AllProducts)
        fun given(query: ProductsByKeyword)
        fun given(command: Purchase)
    }

    interface Routing
}

class PurchasePresenter(
    ui: CoroutineDispatcher,
    private io: CoroutineDispatcher,
    view: View,
    queryHandler: QueryHandler,
    commandHandler: CommandHandler,
    routing: Routing
): PurchaseContract.Presenter, CoroutineContext {
    private val job: Job = Job()
    override val coroutineContext: CoroutineContext = job + ui

    override fun given(query: AllProducts) {
        launch {
            runCatching { withContext(io) { queryHandler.whenever(query) } }
                .onSuccess(view::render)
                .onFailure(view::render)
        }
    }

    override fun given(query: ProductsByKeyword) {
        launch {
            runCatching { withContext(io) { queryHandler.whenever(query) } }
                .onSuccess(view::render)
                .onFailure(view::render)
        }
    }

    override fun given(command: Purchase) {
        launch {
            runCatching { withContext(io) { commandHandler.whenever(command) } }
                .onSuccess(view::render)
                .onFailure(view::render)
        }
    }
}

&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;
&lt;p&gt;アプリ開発者は生成されたContractとDefinitionを元にInteractor、Viewを実装します。&lt;/p&gt;

&lt;p&gt;さらに、ここでInteractorに着目します。
Interactorは上記コードにおいてQueryHandler、CommandHandlerを実装していますが、これらを分離する事を考えてみます。
CQRS+ESアーキテクチャにおけるAPI Response(DTO)は、クライアントにとってView Aggregateとなる事が期待されます。
同じく、GraphQLやその他RPCにおける問い合わせ(Query)の結果も、View Aggregateをサーバサイドとクライアントサイドとで合わせて秩序をもたらす事を期待されています。
これを前提とした場合、これらの技術スタックを選定したクライアントのQueryHandlerの実装クラスは、IDLやAPI Clientを元に自動生成ができるのではないでしょうか。なぜなら、もうサーバサイドでView Aggregateを作ってくれているからです。
仮にキャッシュを挟むにしても、View Aggregateが正しく作られている状況であれば、クライアントはそれをそのまま使う以外の道はないので、さほど難しい事にはならないはずです。&lt;/p&gt;

&lt;p&gt;ここまで理想的に運ぶと、クライアントも同様に本来の役割である所のUI開発と、CommandHandlerの実装に集中できます。&lt;/p&gt;

&lt;p&gt;実際そんなにうまくいくはずは無く、特にQueryHandler実装クラスの自動生成の話については、Firebaseに並ぶBaaS APIとの併用も考えられるので、現実問題厳しいと考えてます。そこで引き続き人間が実装するとなると、QueryHandlerとCommandHandlerを分離するメリットも薄く、返って難解な設計に受け取られてしまうため、結果として分離しない選択肢を取る事も致し方ないと思います。&lt;/p&gt;

&lt;p&gt;ただ、今回紹介したView Aggregate、Event(State)、Query、CommandからクライアントアプリのContract interfaceとクライアント実装の一部を生成をする、という選択肢がとてもしっくり来ているので、もう少し深掘りたい所です。これを実現するソリューションを趣味で開発中で、Advent Calendarに間に合わせたかったのですが、間に合いませんでした。残念…。&lt;/p&gt;

&lt;p&gt;今回はVIPERを題材に検討しましたが、他の設計パターンやアーキテクチャにおいてもそのものを蒸留し洗練された設計パターンが生まれる事を期待しています。すべてを語り切れてない上に多くの誤解を生みそうな記事になってしまいましたが、以上です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ドメイン駆動設計の実践は実装だけがすべてじゃないよという話</title>
    <link rel="alternate" href="/blog/20151222/ddd-insight.html"/>
    <id>/blog/20151222/ddd-insight.html</id>
    <published>2015-12-21T15:00:00Z</published>
    <updated>2015-12-21T15:00:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;この記事は&lt;a href="http://qiita.com/advent-calendar/2015/dwango2"&gt;第2のドワンゴ Advent Calendar 2015&lt;/a&gt;の22日目のエントリです。&lt;/p&gt;

&lt;p&gt;Goで&lt;a href="https://github.com/google/gxui"&gt;gxui&lt;/a&gt;使って2画面ファイラー作ってワショーイしてたんですが、もうちょっと寝かしたいなと思ったので他の事書きます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/df_screenshot.png" width="480" /&gt;&lt;/p&gt;

&lt;p&gt;こっちはこっちで追って公開したいですね。&lt;/p&gt;

&lt;p&gt;というわけで本題です。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;はい。Evans本3部4部ちゃんと理解してない人はやり直しです / “ドメイン駆動設計の間違った方向性” &lt;a href="http://t.co/tcgxlWVONq"&gt;http://t.co/tcgxlWVONq&lt;/a&gt;&lt;/p&gt;&amp;mdash; ソフトウェア設計おじさん (@uzzu) &lt;a href="https://twitter.com/uzzu/status/613990950231093248"&gt;June 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</summary>
    <content type="html">&lt;p&gt;この記事は&lt;a href="http://qiita.com/advent-calendar/2015/dwango2"&gt;第2のドワンゴ Advent Calendar 2015&lt;/a&gt;の22日目のエントリです。&lt;/p&gt;

&lt;p&gt;Goで&lt;a href="https://github.com/google/gxui"&gt;gxui&lt;/a&gt;使って2画面ファイラー作ってワショーイしてたんですが、もうちょっと寝かしたいなと思ったので他の事書きます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/df_screenshot.png" width="480" /&gt;&lt;/p&gt;

&lt;p&gt;こっちはこっちで追って公開したいですね。&lt;/p&gt;

&lt;p&gt;というわけで本題です。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;はい。Evans本3部4部ちゃんと理解してない人はやり直しです / “ドメイン駆動設計の間違った方向性” &lt;a href="http://t.co/tcgxlWVONq"&gt;http://t.co/tcgxlWVONq&lt;/a&gt;&lt;/p&gt;&amp;mdash; ソフトウェア設計おじさん (@uzzu) &lt;a href="https://twitter.com/uzzu/status/613990950231093248"&gt;June 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;Evans本の1部3部4部ちゃんと理解してない人は2部読む権利ないですよ&lt;/p&gt;&amp;mdash; ソフトウェア設計おじさん (@uzzu) &lt;a href="https://twitter.com/uzzu/status/613991792258584577"&gt;June 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;Evans本、2部から行くのがライトウェイトだって言ってる人まだいるのか。SBRじゃないけど、遠回りこそが最短ルートだったよ(私は)&lt;/p&gt;&amp;mdash; ソフトウェア設計おじさん (@uzzu) &lt;a href="https://twitter.com/uzzu/status/651107721173864448"&gt;October 5, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;こんな事ばっか言ってる2015年でした。&lt;br&gt;
DDD初見さんお断りするようで、こういうこと言うのも正直嫌なんですけど、
慌てる必要はないので、ゆっくり勉強しましょう。&lt;br&gt;
2部から始めるのは本当に危険で、2部読むくらいなら責務駆動設計を学んだ方がマシです。
&lt;a href="http://www.amazon.co.jp/dp/4798109037"&gt;オブジェクトデザイン読みましょう。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DDDでおさえなければいけないのは実装パターンではなく、 以下にあげるような内容です。&lt;br&gt;
あまり時間を作れなかったので、特によく考える3つだけ書いておきます。&lt;/p&gt;

&lt;h3 id="toc_0"&gt;本当にドメイン駆動設計を用いて「実装」すべきなのかを検討する事&lt;/h3&gt;

&lt;p&gt;ソフトウェアは1人で構築するものではありません。&lt;br&gt;
(時にカウボーイとして1人になることもありますが、そうなった場合にどうすべきかは考えるまでもないですね:))&lt;br&gt;
一機能を実装する間、コーディングは貴方1人で行っているのかもしれませんが、他の機能を実装しているDeveloperがいて、それぞれにPlannerの意志があって、時には外部のContributorがいて、と関係者はたくさんいます。
実装面は特に、メンバーのスキルセットやモチベーションを加味しなければなりません。&lt;br&gt;
そんな中で、ゴリ押しでDDDを推進して良いのでしょうか？&lt;br&gt;
実装として実践することは良いことですが、何もドメイン駆動で実装する事がドメイン駆動の本質ではないです。&lt;br&gt;
普段の会話にすら、実践する場があります。&lt;br&gt;
上司やお偉いさんの言ってる事がよくわかんないんだけど、つまりこういう文脈があって、この人は暗黙的にこういうドメインを構築していて、こういう単語や動詞を使ってるんだな
って洞察を行いながら会話をすることも、立派なドメイン駆動です。たったこれだけで、以下のパターンが絡んでいます(洞察するともっと絡んでるかもしれません)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ユビキタス言語&lt;/li&gt;
&lt;li&gt;実践的モデラー(とドメインエキスパート)&lt;/li&gt;
&lt;li&gt;コンテキスト境界&lt;/li&gt;
&lt;li&gt;継続的な統合&lt;/li&gt;
&lt;li&gt;コンテキストマップ&lt;/li&gt;
&lt;li&gt;共有カーネル&lt;/li&gt;
&lt;li&gt;顧客/供給者の開発チーム&lt;/li&gt;
&lt;li&gt;順応者&lt;/li&gt;
&lt;li&gt;腐敗防止層&lt;/li&gt;
&lt;li&gt;別々の道&lt;/li&gt;
&lt;li&gt;公開ホストサービス&lt;/li&gt;
&lt;li&gt;公開された言語&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;加えて、開発にはもちろん期日があります。&lt;br&gt;
その際、&lt;a href="http://martinfowler.com/bliki/MonolithFirst.html"&gt;Monolith-First&lt;/a&gt;から始めるものの、将来的なリファクタリング戦略に支障がでないよう
責務レイヤーをしっかり構築しておくというのも1つの手です。
YAGNI言いますけども、それぐらいの未来は構築してもいいと思います。その代わり責任とってよね。&lt;/p&gt;

&lt;h3 id="toc_1"&gt;ドメイン駆動設計でソフトウェアを構築するのであれば、ドメインとは何かを定義する事&lt;/h3&gt;

&lt;p&gt;ドメインを定義しなければ、異なる文脈を持った余計なシナリオが介入したりして、やがてそれらの違った文脈を整える神(God)が宿るでしょう。
ドメインビジョン声明文を書いていますか？&lt;/p&gt;

&lt;h3 id="toc_2"&gt;コンテキストを常に念頭に置き、ドメインに対する深い洞察力を身につけること&lt;/h3&gt;

&lt;p&gt;Repositoryパターンは永続化という側面から見ると一見責務は1つですが、より洞察を行うと、ReadとWriteの成分があるので、SRPに反しています。
DomainEventを中心としたアーキテクチャではRepositoryは分解されるべきなのではないか、と思うことがしばしばあります。&lt;/p&gt;

&lt;p&gt;プログラミング言語仕様のnamespaceにも着目してみます。
ドメインが成熟し、文脈が構築されていく中で、これらの機能を用いた表現も検討すべきです。&lt;br&gt;
よくDDDのサンプル実装ではDomainとかInfrastructureとかnamespaceを掘ってますが、本当に必要でしょうか？&lt;br&gt;
もちろん、この構築方法にもサンプルを示すというコンテキストがあって、そうしているのだと思います。&lt;br&gt;
「空間」であるはずが、空間をまたいで水平方向の空間に依存しているようにみえて、個人的にはちょっと先行きが不安になります。&lt;br&gt;
仮に正しく空間として取り扱った場合、ドメインモデルが1ディレクトリに溢れて辛い事になります。C#ならnamespaceではなくディレクトリ掘り、それをモジュールの単位と定めるのが良いでしょう。&lt;br&gt;
packageやmoduleでは、またアプローチが違ってきます。&lt;/p&gt;

&lt;p&gt;このように、言語仕様や、設計パターンそのもの洞察し、より深いドメインモデルの構築を行う事もしばしばあります。&lt;/p&gt;

&lt;h2 id="toc_3"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ドメイン駆動設計理解してないからって死ぬわけじゃないから、焦らず勉強しよう。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>C#でパターンマッチング</title>
    <link rel="alternate" href="/blog/20141223/switch-case-cs.html"/>
    <id>/blog/20141223/switch-case-cs.html</id>
    <published>2014-12-22T15:00:00Z</published>
    <updated>2014-12-22T15:00:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;この記事は&lt;a href="http://qiita.com/advent-calendar/2014/csharp"&gt;C# Advent Calendar 2014&lt;/a&gt;の23日目のエントリです。
&lt;a href="http://moririring.hatenablog.com/entry/2014/12/22/002337"&gt;22日目はC#のIntの話でした。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クライアントアプリを書いていると何かとステートフルになり、かつ状態毎の描画もころころ変わります。さらに、WPFの恩恵を受けられないC#でかつ古いmono環境化(決してゲームエンジンは指していませんね?)では、かなり悲しみを背負う事になります。なにも悲しみを背負うので、Rxが再実装されたり、データバインディング機構を再実装したりします。辛い。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;この記事は&lt;a href="http://qiita.com/advent-calendar/2014/csharp"&gt;C# Advent Calendar 2014&lt;/a&gt;の23日目のエントリです。
&lt;a href="http://moririring.hatenablog.com/entry/2014/12/22/002337"&gt;22日目はC#のIntの話でした。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クライアントアプリを書いていると何かとステートフルになり、かつ状態毎の描画もころころ変わります。さらに、WPFの恩恵を受けられないC#でかつ古いmono環境化(決してゲームエンジンは指していませんね?)では、かなり悲しみを背負う事になります。なにも悲しみを背負うので、Rxが再実装されたり、データバインディング機構を再実装したりします。辛い。&lt;/p&gt;

&lt;p&gt;ステートフルかつ何も恩恵が得られないとなれば、無限に繁殖するifとswitch-caseですね。ifはさておき、C#のswitch-caseは非常にシンプルなんですが、シンプルが故にかゆい所に手が届かなくて辛い。
そもそも状態と条件分岐は○○モデルにしましょうよ！的な所で、&lt;a href="https://gist.github.com/uzzu/5412336c0532508dd17c"&gt;参照型Enum&lt;/a&gt;を作ったりします。JavaのEnumっぽい何かですね。  &lt;/p&gt;

&lt;p&gt;ドメイン層のモデルにおいては、正しく責務が与えられているはずなので、この&lt;a href="https://gist.github.com/uzzu/5412336c0532508dd17c"&gt;参照型Enum&lt;/a&gt;というアプローチは有効なんですが、UI層でも同様に、Aggregate(ViewModel)の状態とその描画方法を見通しよく記述できるかというと、必ずしもそうでもないんじゃないかなというのが経験上の持論です。(異論は認める)&lt;/p&gt;

&lt;p&gt;そこで条件分岐なんとかしようやと、とりあえず試しにパターンマッチング実装してみた。
ぶっちゃけ途中掛けで、full-AOT問題と、あとはgenerics周りの問題を解決したら、原型をとどめてないインターフェースになりそう。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/uzzu/32f9d0bc401f6e219f01"&gt;Case.cs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;＜＜＜追記＞＞＞&lt;/p&gt;

&lt;p&gt;型推論効く形にちょいと手直ししました。各APIの利便性を優先、した結果、型推論効かないときはコンパイルエラーになっちゃうけどまあそこは手前で型引数渡せば良いのでしゃーなし。
だいぶスッキリはしたけど、full-AOTは未着手。&lt;/p&gt;

&lt;p&gt;＜＜＜追記おわり＞＞＞&lt;/p&gt;

&lt;p&gt;Linqを書くときみたいに三項演算子をモリモリ書いていくのもなんだか違和感あるし、でも条件分岐の判定部分はPredicateにしたいし、とか詰め込みながらモリモリと書いていき、
だんだん作るのが楽しくなってきて、もうちょっと便利にとか、型推論効かせて記述を楽にしようとかしてたら、結果としてたくさんCS0411を引きまくって一旦元に戻しました。&lt;/p&gt;

&lt;p&gt;UIロジックも関数型ライクなDSLっぽくっていうかF#で書いたらこのご時世でももうちょっとマシなコードになりそうな気がするんだよなあと思ったところで終了です。
下はサンプルですが、もうちょっと複雑なのもいけるのでまあ&lt;a href="https://gist.github.com/uzzu/32f9d0bc401f6e219f01#file-casetest-cs"&gt;テストとか読んでみてください&lt;/a&gt;。&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;div class="lineno"&gt;2&lt;/div&gt;&lt;div class="lineno"&gt;3&lt;/div&gt;&lt;div class="lineno"&gt;4&lt;/div&gt;&lt;div class="lineno"&gt;5&lt;/div&gt;&lt;div class="lineno"&gt;6&lt;/div&gt;&lt;div class="lineno"&gt;7&lt;/div&gt;&lt;div class="lineno"&gt;8&lt;/div&gt;&lt;div class="lineno"&gt;9&lt;/div&gt;&lt;div class="lineno"&gt;10&lt;/div&gt;&lt;div class="lineno"&gt;11&lt;/div&gt;&lt;div class="lineno"&gt;12&lt;/div&gt;&lt;div class="lineno"&gt;13&lt;/div&gt;&lt;div class="lineno"&gt;14&lt;/div&gt;&lt;div class="lineno"&gt;15&lt;/div&gt;&lt;div class="lineno"&gt;16&lt;/div&gt;&lt;div class="lineno"&gt;17&lt;/div&gt;&lt;div class="lineno"&gt;18&lt;/div&gt;&lt;div class="lineno"&gt;19&lt;/div&gt;&lt;div class="lineno"&gt;20&lt;/div&gt;&lt;div class="lineno"&gt;21&lt;/div&gt;&lt;div class="lineno"&gt;22&lt;/div&gt;&lt;div class="lineno"&gt;23&lt;/div&gt;&lt;div class="lineno"&gt;24&lt;/div&gt;&lt;div class="lineno"&gt;25&lt;/div&gt;&lt;div class="lineno"&gt;26&lt;/div&gt;&lt;div class="lineno"&gt;27&lt;/div&gt;&lt;div class="lineno"&gt;28&lt;/div&gt;&lt;div class="lineno"&gt;29&lt;/div&gt;&lt;div class="lineno"&gt;30&lt;/div&gt;&lt;div class="lineno"&gt;31&lt;/div&gt;&lt;div class="lineno"&gt;32&lt;/div&gt;&lt;div class="lineno"&gt;33&lt;/div&gt;&lt;div class="lineno"&gt;34&lt;/div&gt;&lt;div class="lineno"&gt;35&lt;/div&gt;&lt;div class="lineno"&gt;36&lt;/div&gt;&lt;div class="lineno"&gt;37&lt;/div&gt;&lt;div class="lineno"&gt;38&lt;/div&gt;&lt;div class="lineno"&gt;39&lt;/div&gt;&lt;div class="lineno"&gt;40&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CharacterStatusView&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Case&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CharacterStatus&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="n"&gt;IMatcher&lt;/span&gt; &lt;span class="n"&gt;characterStatusRenderer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;characterStatusRenderer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaseAction&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dead&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderAsDead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Danger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderAsDanger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderAsWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RenderAsSafety&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnCharacterStatusChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CharacterStatus&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;characterStatusRenderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderAsDead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CharacterStatus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 死んだお
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderAsDanger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CharacterStatus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ピンチだお
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderAsWarning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CharacterStatus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// そろそろやばいお
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderAsSafety&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CharacterStatus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 元気モリモリ
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>monoのソースを読み始める話</title>
    <link rel="alternate" href="/blog/20141210/mono-reading.html"/>
    <id>/blog/20141210/mono-reading.html</id>
    <published>2014-12-09T15:00:00Z</published>
    <updated>2014-12-09T15:00:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;この記事は&lt;a href="http://qiita.com/advent-calendar/2014/csharp"&gt;C# Advent Calendar 2014&lt;/a&gt;の10日目のエントリです。
&lt;a href="http://tech.tanaka733.net/entry/must-load-user-profile-x509certificates2-ctor-with-bytearray-on-aspnet"&gt;9日目はASP.NET/IIS環境での証明書の取り扱いにおけるノウハウ話でした。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;近年は&lt;a href="http://xamarin.com/"&gt;Xamarin&lt;/a&gt;や&lt;a href="http://japan.unity3d.com/"&gt;Unity3D&lt;/a&gt;がお盛んで、今年初旬に&lt;a href="https://mono-ue.github.io/"&gt;mono for UnrealEngine&lt;/a&gt;が発表(2014年12月現在では辛い状態ですが)されたり等、何かとmonoのお世話になることが増えてきたんじゃないでしょうか。かくいう私もお世話になっているうちの1人です。お世話になっている訳ですから、その実装に興味を持ち始める人もいるんじゃないかなと思います。そこで本記事では、とっつきやすそうなところをなんとなく追っていきます。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;この記事は&lt;a href="http://qiita.com/advent-calendar/2014/csharp"&gt;C# Advent Calendar 2014&lt;/a&gt;の10日目のエントリです。
&lt;a href="http://tech.tanaka733.net/entry/must-load-user-profile-x509certificates2-ctor-with-bytearray-on-aspnet"&gt;9日目はASP.NET/IIS環境での証明書の取り扱いにおけるノウハウ話でした。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;近年は&lt;a href="http://xamarin.com/"&gt;Xamarin&lt;/a&gt;や&lt;a href="http://japan.unity3d.com/"&gt;Unity3D&lt;/a&gt;がお盛んで、今年初旬に&lt;a href="https://mono-ue.github.io/"&gt;mono for UnrealEngine&lt;/a&gt;が発表(2014年12月現在では辛い状態ですが)されたり等、何かとmonoのお世話になることが増えてきたんじゃないでしょうか。かくいう私もお世話になっているうちの1人です。お世話になっている訳ですから、その実装に興味を持ち始める人もいるんじゃないかなと思います。そこで本記事では、とっつきやすそうなところをなんとなく追っていきます。&lt;/p&gt;

&lt;p&gt;まずは、&lt;a href="https://github.com/mono/mono"&gt;mono/mono @ github.com&lt;/a&gt;からmonoをcloneします。Unity3Dな方は&lt;a href="https://github.com/Unity-Technologies/mono"&gt;Unity-Technologies/mono @ github.com&lt;/a&gt;からどうぞ。&lt;/p&gt;
&lt;pre class="highlight text"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;div class="lineno"&gt;2&lt;/div&gt;&lt;div class="lineno"&gt;3&lt;/div&gt;&lt;div class="lineno"&gt;4&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;git clone https://github.com/mono/mono.git

# Unity3Dな方は以下
git clone https://github.com/Unity-Technologies/mono.git
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;
&lt;p&gt;まずとっかかりが早いのはmscorlibですかね。分かりませんが進めます。&lt;br&gt;
前提として、&lt;a href="https://github.com/mono/mono/tree/master/mcs/class/"&gt;mcs/class&lt;/a&gt;以下に、アセンブリとして配布されるたくさんのソースコードがあります。&lt;a href="https://github.com/mono/mono/tree/master/mcs/class/corlib"&gt;mcs/class/corlib&lt;/a&gt;ディレクトリがmscorlib.dllのソースコードに相当します。その他の実装を参照する場合も、アセンブリ名に紐づく形でディレクトリが掘られています(例えばSystem.LinqはSystem.Core.dllに含まれているので、&lt;a href="https://github.com/mono/mono/tree/master/mcs/class/System.Core"&gt;mcs/class/System.Core&lt;/a&gt;にある、といった感じ)から、分かりやすいですね。&lt;/p&gt;

&lt;p&gt;ソースコードを読む際は合わせて&lt;a href="http://referencesource.microsoft.com/"&gt;Microsoft ReferenceSource&lt;/a&gt;も一緒に読むと、楽しくて1日が終わります。mono上での実装は.NETのそれと比べて非常にシンプルなものとなっているので、たとえばSystem.Linqの述語がどういう実装になってるのか?みたいな疑問は、monoのソースコードを読んだ方がもしかしたら早いかもしれません。&lt;/p&gt;

&lt;p&gt;1つ言い忘れていましたが、みなさんお使いのエディタにはアセンブリブラウザが搭載されているでしょうから、そちらからdllを参照するでも良いですが、その場合アセンブリとしてコンパイルされた状態になっているので、IEnumerableやasync-awaitを使用したソースコードはCompilerGeneratedなソースコードになって出てくるので、今まで読んだことのない方は気持ちでやっていく必要が高まってしんどいかもしれません。&lt;/p&gt;

&lt;p&gt;それでは実際にソースコードを追ってみましょう。今回は、System.Globalization.CultureInfoを読んでみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/ja-jp/library/system.globalization.cultureinfo%28v=vs.110%29.aspx"&gt;System.Globalization.CultureInfoってなに?って人はMSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Globalization/CultureInfo.cs"&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ふむふむと読み進めていくと、所々で&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;constructed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;Construct&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;
&lt;p&gt;というように、プロパティが実際に参照されるまでは値を取得しないように遅延評価が行われている事が分かります。Constructの実装は&lt;a href="https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Globalization/CultureInfo.cs#L597"&gt;ここ&lt;/a&gt;ですね。更に追っていくと、construct_internal_locale_from_lcid (cultureID);を実行しています。
このメソッドをみると&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl"&gt;&lt;div class="lineno"&gt;1&lt;/div&gt;&lt;div class="lineno"&gt;2&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;span class="na"&gt;[MethodImplAttribute (MethodImplOptions.InternalCall)]&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;construct_internal_locale_from_lcid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lcid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/pre&gt;
&lt;p&gt;となってますね。MethodImplOptions.InternalCallを指定していますので、CLR(共通言語ランタイム)上に実装されていることが分かります。「ぬああああん(以下略」とならず、もっといきましょう。monoならもっと先が読める！(コレが一番言いたかった)&lt;/p&gt;

&lt;p&gt;monoにおいては、MethodImplOptions.InternalCallで指定されたメソッドは、&lt;a href="https://github.com/mono/mono/blob/master/mono/metadata/icall-def.h"&gt;mono/metadata/icall-def.h&lt;/a&gt;上でマッピングされています。今回の例で言えば、マッピングは&lt;a href="https://github.com/mono/mono/blob/master/mono/metadata/icall-def.h#L289"&gt;同ヘッダにおいてこのように定義されており&lt;/a&gt;、そのメソッドの実装は&lt;a href="https://github.com/mono/mono/blob/master/mono/metadata/locales.c#L490"&gt;mono/metadata/locale.c&lt;/a&gt;に、にあります。マッピングされているメソッド名は&lt;code&gt;ves_icall_{名前空間}_{クラス名}_{メソッド名}&lt;/code&gt;という命名規則(vesはVirtualExecutionSystemの略かな?分かりませんが)で定義されてたり、そうでなかったりとまちまちです。概ね(mini本体に含まれるものを除き)&lt;a href="https://github.com/mono/mono/tree/master/mono/metadata"&gt;mono/metadata&lt;/a&gt;に含まれています。その他のメソッドを探す際も、ves_icall、あるいはicall-def.h上でのマッピングルールを見ながらgrepをかければみつかりそうですね。&lt;/p&gt;

&lt;p&gt;InternalCallしているメソッドが分かったら、あとは頑張ってCを読みます。CultureInfoについて追っていくと、最終的に&lt;a href="https://github.com/mono/mono/blob/master/mono/metadata/culture-info-table.h"&gt;mono/metadata/culture-info-table.h&lt;/a&gt;にたどり着きます。
ものすごいたくさんの数値やバイトコードが列挙された配列がありますが、怖くはなくて、cultureIDに紐づくCultureInfoやRegionInfoに相当する値が入っている配列のアドレスが列挙されているとかそんな感じです。つまり定義済みのCultureInfoやRegionInfoにアクセスしているということです。ちゃんと読み進めると、各要素がISOCurrencySymbolだったりに紐付いている事が分かります。なるほどーためになる。&lt;/p&gt;

&lt;p&gt;＜＜ 追記 ＞＞&lt;/p&gt;

&lt;p&gt;Atsushi Enoさんから捕捉頂きました。ありがとうございますm(_ _)m
&lt;blockquote&gt;ちなみにculture-info-table.hはmono/tools/locale-builder でUnicode CLDRから生成されているので、そっちを見るともっと人にやさしいです。&lt;/blockquote&gt;
とのことです。実際に&lt;a href="https://github.com/mono/mono/tree/master/tools/locale-builder"&gt;locale-buiilderを読んでみると&lt;/a&gt;、C#で書かれていて、culture_info_entryやregion_info_entryのソースコードがモリモリ生成されていたりするのが分かります。とても人にやさしいですね！&lt;/p&gt;

&lt;p&gt;今回コードリーディングの対象にしたCultureInfoですが、偶然にも&lt;a href="http://sta-blockhead.blogspot.jp/2010/03/datetimeformatinfofulldatetimepattern.html"&gt;staさんが詳細にまとめてくれていました。&lt;/a&gt; CultureInfoの詳細はこちらの記事を読むと良いです。ありがとうございますm(_ _)m&lt;/p&gt;

&lt;p&gt;＜＜ 追記おわり ＞＞&lt;/p&gt;

&lt;p&gt;ここで、例えばUnity-Technologiesのmonoと、本家のmonoとでdiffを取ったりして、あーここは対応が追いついてないみたいだから、最新のmonoの実行結果からCodeDomを用いてソースコードを自動生成しておこうとかそういった行為がとれるわけですね。「いやあのそれはソースコード読まなくても普通に実行すれば分かるでしょ」というのもありますが、この記事を読んだ皆さんは、mono環境におけるInternalCallの壁を超えたようなものなので、実行する以外のアプローチがとれるようになって皆さんの業務の幅が広がって私はとても嬉しく思います。&lt;/p&gt;

&lt;p&gt;続けて、mcs、miniの実装のコードにも触れようかという所なんですが、筆者都合により本記事はここまでです。
引き続き、mcsやminiのソースコードを読む際には、一度&lt;a href="http://www.mono-project.com/docs/"&gt;Mono Documentation&lt;/a&gt;やmonoのリポジトリの各docsディレクトリにあるテキストに目を通してからの方が気持ち理解が早いかなと思います。以上です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://atsushieno.hatenablog.com/entry/2014/12/11/000240"&gt;11日目はmcsの最新情報と今後の展望について&lt;/a&gt;です。とても気になります。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ドメインを巡るお話</title>
    <link rel="alternate" href="/blog/20140104/think-domain-driven.html"/>
    <id>/blog/20140104/think-domain-driven.html</id>
    <published>2014-01-03T23:53:00Z</published>
    <updated>2014-01-03T23:53:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;昨年末にだらだらDCIに関する自分の考えを整理したくて身内で話していて、&lt;br&gt;
結論としては「DDDとDCIどちらもメンタルモデルに近づけるために機能してる点は変わらない。その先DDDあるいはDCIをフレームワークにするか、あるいは一部に取り入れるのか、そこは取組むドメインによって取捨選択だよね」というところに落ち着いたのだけれど、勿体無い内容な気がするので改めてブログに書くことにする。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;昨年末にだらだらDCIに関する自分の考えを整理したくて身内で話していて、&lt;br&gt;
結論としては「DDDとDCIどちらもメンタルモデルに近づけるために機能してる点は変わらない。その先DDDあるいはDCIをフレームワークにするか、あるいは一部に取り入れるのか、そこは取組むドメインによって取捨選択だよね」というところに落ち着いたのだけれど、勿体無い内容な気がするので改めてブログに書くことにする。
&lt;/p&gt;

&lt;h3 id="toc_0"&gt;DDD脳から見たDCIの考察&lt;/h3&gt;

&lt;p&gt;DCIはFATなドメインモデルに対するアプローチというよりは、シナリオを明確にするためのアプローチなのかなと思う。&lt;br&gt;
DDDを実践するような複雑な問題に直面した時、ドメインモデルは山のように増える。より知識を噛み砕いてドメインモデルにしたほうがより上層のロジックが簡潔になるので積極的にドメインモデルに落とし込む方がよく、結果として、シナリオを満たす為のAggregateも増えに増える事が分かった。知識がそのままモデルになるので、量に対する抵抗はなかった。しかし、&amp;#39;蒸留&amp;#39;の工程で改めて俯瞰して見ると、Aggregateのインターフェースがどういうシナリオに対して提供されているか不明瞭だ、という事に気づいた。&lt;br&gt;
実運用フローとして、DDDではシナリオが追加された時、まずドメインモデルがシナリオをクリアする事ができるかを評価する。 本来、シナリオに対して必要なロールは一意に紐付けられるはずが、様々なシナリオをクリアしてきた結果、 シナリオを満たす事ができないAggregateのインターフェースも眺める事になる。こういう状況では、ドメインモデルの評価が完了するにはいくらエキスパートといえどそれなりに時間がかかってしまうのではないだろうか？&lt;br&gt;
この状況を打破すべくシナリオをドメインモデル(Context)に、AggregateのインターフェースをRoleに昇格させて、よりメンタルモデルに近付け、評価すべきドメインモデルをより限定的に、ドメインの理解可読性を向上させる為に、DCIを取り入れるのは良いアプローチかなーと考えている。&lt;br&gt;
DDDとDCI併用しろとかそういう話ではないのだけれど、上記のような事を考えていると、DDDに加えてさらにDCIを適用しなければならない状況に陥るのは、そんなにないと思う。そもそもDDDを実践する事自体、複雑な問題領域でなければやらない。幸にも自分は今ゲーム開発に携わっているのでその点困ってはいないが、他の業種ではそうでもないかもしれない。それに加えて、蒸留によってコアドメインからサブドメインを定義し分離するアプローチをとる事もあり得る。さらに言うと、現実解としてDCIを選択・採用するというのは、現在のプログラマの知識レベルから考えるに難しいと思う。僕自身、設計に正解は無いとはいえど、DDDについてはゴールイメージがある程度想像できるようになり、今の仕事でも実践し、人に伝えられる(うまく伝わっているかはまだ定かではない)ようには理解が進んでいるけれど、DCIについてはまだゴールイメージが湧いていない。&lt;/p&gt;

&lt;h3 id="toc_1"&gt;DCIとServiceとドメイン&lt;/h3&gt;

&lt;p&gt;そんな考えを張り巡らせていると&lt;a href="https://twitter.com/j5ik2o"&gt;@j5ik2o&lt;/a&gt;氏からこんな回答を頂いた。とてもありがたい。
&lt;blockquote&gt;ボクは、DDDでいうドメインサービスやアプリケーションサービスの中には、エンティティや値オブジェクトに、本来あるべき役割が埋没している可能性があるのではないか、と思っています。
たとえば、口座間のお金の転送だって、口座間転送サービスとせずに、口座間転送という場面において、口座はそれぞれ送金元、送金先という役割を持っているのでは、と思うんですよね。ただ、場面を意識せずに、口座エンティティにそのまま振る舞いを配置してしまうと不自然になる(DDDだとこの時点でサービスにいく。これは悪いというわけではなく現実解だと思ってる)んだけど、場面を意識して適切なロールをドメインオブジェクトに合成すれば、メンタルモデルに合っているかもしれないと思うようになりました。これはEricのユビキタス言語パターンにも反しないはずです。&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;加えて、年明けにDCIとServiceを巡る記事が投稿された。素晴らしい。必読だと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.yuyat.jp/archives/2330"&gt;Ruby/Rails 用 DI コンテナ Dee をつくった、あるいは Ruby のカルチャーについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rosylilly.hatenablog.com/entry/2014/01/02/104732"&gt;DCI なんて面倒なだけで Service 使えばいい』への返答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://togetter.com/li/610993"&gt;DCI/Serviceをめぐる話題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://j5ik2o.me/blog/2014/01/03/dci-service/"&gt;ServiceとDCIについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕自身の考えは概ね&lt;a href="https://twitter.com/j5ik2o"&gt;@j5ik2o&lt;/a&gt;氏に同じなので違う視点で話す。&lt;br&gt;
ドメインという言葉自体が曖昧なので大きく2つに分けると、アプリケーションの問題領域を指すアプリケーションドメインと、アプリケーションを実現する基盤となるソリューションドメインがある。ServiceだのDCIだの言われているけれど、なぜここに若干の亀裂があるのかと考えると、 アプリケーションドメインに対するアプローチとして、アプリケーションドメインそのものを中心に捉えているか、ソリューションドメインに偏って捉えているか、という思想の食い違いにあるのではないかなと思う。&lt;br&gt;
DDDで語られるドメインは概ねアプリケーションドメインを指しており、そのアプローチは、アプリケーションドメインそのものに着目し、ドメインの知識を噛み砕いてユビキタス言語を構築し、会話し、それをドメインモデルとし、複雑な問題をドメインモデルが解決する、というように、アプリケーションドメインを中心に捉えていると理解している。&lt;br&gt;
反対に、ソリューションドメインに偏って捉えるというのはどうことかというと、実現する言語、フレームワーク、ライブラリ等、解決手段を中心に問題の解決を図るということである。偏った、とかいう言い方をするのは決して否定しているわけではなく、僕自身、経験則とか現実解として、これはサブドメイン/ソリューションドメインとして切り出せるだろうな、というものは早期に切り出してモジュール/ライブラリ化することもある。ただし、目的はあくまでもアプリケーションのコアドメインを隔離する為である。&lt;br&gt;
本来アプリケーションドメインとソリューションドメインは一致していることが望ましい。モジュール/ライブラリはアプリケーションそのものではない。目的が本来解決すべきアプリケーションドメインから遠ざかってしまう。よくプログラマが脱線してコード書きまくるのは大体新たな問題を発見してしまったからだよね、という余談はさておき、何が言いたいかというと、ソリューションドメインに偏ったアプローチはアプリケーションが本来抱えている問題を見失う可能性が高く、その回避策として、気をつけなきゃならない事(改善プロセスetc&amp;hellip;)が増えたり等、結果的に仕事を増やしているだけかもしれないので、一旦立ち止まって、今携わっているアプリケーションを振り返ってみて欲しい。&lt;/p&gt;

&lt;h3 id="toc_2"&gt;Serviceという単語が曖昧だという話&lt;/h3&gt;

&lt;p&gt;世間一般的に語られているServiceは、純粋人工物としてのServiceだったり、PoEAAのService(Layer)だったりする。これら2つにも更に分類できて、利用者への操作セットを提供する(Domain|Application|etc&amp;hellip;)FacadeとしてのServiceと、アプリケーションロジックを実装するOperationScriptとしてのServiceがある。&lt;br&gt;
ServiceがDDDで語られるServiceであるとするならば、それは会話の中で生まれたアプリケーションドメインの知識の1つなのだけれど、それ以外だとするならば、アプリケーションドメインの知識であるとは限らない。例えば、フレームワークとしてたまたまsuffixにServiceとついているだけとか、アノテーションとして付いているだけで、そのオブジェクトの責務が一意に予測できない。&lt;br&gt;
仮に目的が同じだとしても、結果としてプログラマがコードから受け取る印象はまちまちであり、DDD的にはこういうのを「コンテキスト境界」を超えている、なんて言ったりするのだけれど、それはさておき、Serviceというワードは曖昧で、UtilsとかManagerとかcheck*とか、かつて抽象的だと嫌ってきたものと同等なので、有識者の方々にはServiceという単語を使うときはもう少し気を遣ってもらいたいなと思う。&lt;/p&gt;

&lt;h3 id="toc_3"&gt;上記内容を理解するためにオススメな本&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/4894716828/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4894716828&amp;linkCode=as2&amp;tag=himeatball-22"&gt;実践UML&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DDDのServiceはこの本に記載されているGRASPパターン(責務駆動の原理原則に相当する)を継承している。&lt;/li&gt;
&lt;li&gt;分厚い本なので振り回さないようにするか電子化しましょう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/4798105538/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4798105538&amp;linkCode=as2&amp;tag=himeatball-22"&gt;PoEAA&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ServiceLayerを改めて振り返るなら是非。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/4894715287/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4894715287&amp;linkCode=as2&amp;tag=himeatball-22"&gt;マルチパラダイムデザイン&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ソリューションドメインって何？なったらどうぞ。&lt;/li&gt;
&lt;li&gt;この本で語られるドメインは半分くらいソリューションドメイン。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/B00GRKD6XU/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00GRKD6XU&amp;linkCode=as2&amp;tag=himeatball-22"&gt;エリック・エヴァンスのドメイン駆動設計&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どうぞ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_4"&gt;年明けからソフトウェア設計の話で盛り上がるなんて&lt;/h3&gt;

&lt;p&gt;2014年は楽しい年になりそうですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>流行りのdotfiles運用をゲストOSとホストOS(Windows7)で共有する</title>
    <link rel="alternate" href="/blog/20130116/host-win7-and-guest-os-share-environment-of-dotfiles.html"/>
    <id>/blog/20130116/host-win7-and-guest-os-share-environment-of-dotfiles.html</id>
    <published>2013-01-16T07:41:00Z</published>
    <updated>2013-01-16T07:41:00Z</updated>
    <author>
      <name>Hirokazu Uzu</name>
    </author>
    <summary type="html">&lt;p&gt;ようやく流行りのdotfiles運用に乗っけました。 dotfiles運用は本当に快適で、幸福に満ち溢れています。
Windowsって本当にかわいいですよね。痒いところに手が届かないところがすごい好きです。現状、日常のほとんどの作業はゲストOSであるところのUbuntu上で行っているので、ホストOSであるWindows7をほとんど触っていないのですが、とはいえ、どうしてもWindows上で作業した方が早いケースがあったり、 Windows上にしかインストールできないソフトウェアがあることがまああるわけで、そういういざという時に最低限の編集が可能が環境がWindows上に存在しない、もしくは差異があるというのはいささか不便であります。&lt;br&gt;
で、この問題をどうしようかなと調べてたわけですが…&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;ようやく流行りのdotfiles運用に乗っけました。 dotfiles運用は本当に快適で、幸福に満ち溢れています。
Windowsって本当にかわいいですよね。痒いところに手が届かないところがすごい好きです。現状、日常のほとんどの作業はゲストOSであるところのUbuntu上で行っているので、ホストOSであるWindows7をほとんど触っていないのですが、とはいえ、どうしてもWindows上で作業した方が早いケースがあったり、 Windows上にしかインストールできないソフトウェアがあることがまああるわけで、そういういざという時に最低限の編集が可能が環境がWindows上に存在しない、もしくは差異があるというのはいささか不便であります。&lt;br&gt;
で、この問題をどうしようかなと調べてたわけですが…
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tinyurl.com/ao2fw9n"&gt;Mklink&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いつのまに標準でシンボリックリンク作成できるようになったんですね。&lt;br&gt;
Windows7からなんですね。知識がまったく追いついていません。&lt;br&gt;
ハードリンクとjunctionにありがとう、fsutilにありがとう。&lt;/p&gt;

&lt;p&gt;というわけでLinux環境同様にdotfilesの各ファイルに対するシンボリックリンクを貼る&lt;br&gt;
Windows7用のbatchfileを書きました。
&lt;script src="https://gist.github.com/4545401.js?file=dotlink.bat"&gt;&lt;/script&gt;
注意点としては、&lt;br&gt;
mklinkコマンドが管理者権限で実行する必要があるので&lt;br&gt;
このbatchfileも管理者権限で実行しないとエラー吐きまくって終了するぐらいです。  &lt;/p&gt;

&lt;p&gt;あとはホストOSのHOMEディレクトリをゲストOSにマウントすれば&lt;br&gt;
大体ゲストOSからホストOSとあんなことやこんなことができていい感じですね。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;結論&lt;/h2&gt;

&lt;p&gt;そろそろ本当にMacBook+iOSに移行したいので、AppleさんにはWWDC2013で誠意を見せていただきたい所存&lt;/p&gt;
</content>
  </entry>
</feed>
