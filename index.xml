<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uzzu::Blog on Uzzu::Blog</title>
    <link>https://uzzu.github.io/</link>
    <description>Recent content in Uzzu::Blog on Uzzu::Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 03 Feb 2019 00:00:00 +0900</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>マルチエフェクターに移行した</title>
      <link>https://uzzu.github.io/post/multi-effector.html</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/multi-effector.html</guid>
      <description>&lt;p&gt;今まではコンパクトエフェクター使ってたけど、だいたい売ってマルチエフェクターに移行した。初めてのマルチで四苦八苦してる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GroovyBuilderの使い所</title>
      <link>https://uzzu.github.io/post/gradle-groovy-builder.html</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/gradle-groovy-builder.html</guid>
      <description>&lt;p&gt;Gradle Kotlin DSLで何かと役に立つGroovyBuilderの話です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coroutinesの多重呼び出しの防止</title>
      <link>https://uzzu.github.io/post/hot-coroutines.html</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/hot-coroutines.html</guid>
      <description>&lt;p&gt;Rxの世界ではHot Observableをよく使っていたけど、Coroutinesでも使いたい。
直近自分には2つの需要があるかなというところ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多重に &lt;code&gt;launch&lt;/code&gt; しない (GUIの連打防止をGUIの実装上でやるのが面倒)&lt;/li&gt;
&lt;li&gt;多重に suspend functionを呼び出したくはないが、結果だけは欲しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで作ってみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>集計したいクライアントログとは</title>
      <link>https://uzzu.github.io/post/distilling-client-log.html</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/distilling-client-log.html</guid>
      <description>&lt;p&gt;なんなんだ、を考える。
あらゆるクライアントログを一般化する。結論はない。まだまだ考え中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin MPPでのcoroutines test</title>
      <link>https://uzzu.github.io/post/mpp-coroutines-test-common.html</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/mpp-coroutines-test-common.html</guid>
      <description>&lt;p&gt;そのうちリリースされると思うけど、まだっぽいのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kotlinx.serialization/JSON利用時にkotlinx-serialization pluginを使用しない</title>
      <link>https://uzzu.github.io/post/kotlin-json-serialization-mini.html</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/kotlin-json-serialization-mini.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;kotlinx.serialization&lt;/a&gt;は書いて字の通りserialize/deserializeライブラリで、Multiplatformサポートと、フォーマットとしてJSON、CBOR、Protobufをサポートしています。バージョンが0系ということでinterfaceに変更が入る可能性はあるけど、まあ使わなければなんとやら。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin Multi Platform Project Boilerplateを作った</title>
      <link>https://uzzu.github.io/post/kotlin-mpp-boilerplate.html</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/kotlin-mpp-boilerplate.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/uzzu/kotlin-mpp-boilerplate&#34;&gt;https://github.com/uzzu/kotlin-mpp-boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スマフォからの投稿テストも兼ねて、kotlin-mpp-boilerplateを作ったので解説。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>年末年始あれこれ2018/2019</title>
      <link>https://uzzu.github.io/post/20190103.html</link>
      <pubDate>Thu, 03 Jan 2019 12:33:01 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/20190103.html</guid>
      <description>&lt;p&gt;なんとなくここ数年SNSはちょっと距離を置いて、Twitterではほどほどにまともな事を書く生活を送っていたけど、Twitterでほどほどにまともな事を書いても効果が薄いなという当たり前の結論に至った。昔から言ってるんだがーな事が視界に入って届いてないとかで一人で消耗しているとかそういう話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Distilling VIPER pattern</title>
      <link>https://uzzu.github.io/post/distilling-viper-architecture.html</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/distilling-viper-architecture.html</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2018/ddd&#34;&gt;ドメイン駆動設計 #1 Advent Calendar 2018&lt;/a&gt; 19日目の記事です。&lt;/p&gt;

&lt;p&gt;何かとDDDの話はサーバサイドエンジニアの話として取り上げられます。
それもそのはず、サービスの根幹となるビジネスドメインのロジックはサーバサイド上組まれる事が多い事にあると思います。
ではクライアントサイドは関係ないのかというとそんな事はなくて、Layered Architectureのように部分的にDDDの戦術的なエッセンスを導入する事はさることながら、サーバAPIがGraphQL、RESTful API、CQRS+ESなアーキテクチャであれば同様にそれらに適した設計を検討する必要があります。ましてや、ゲーム開発ではより多角的に全く別のアプローチを取る事があります。
つまり、開発するクライアントそのものの要件、規模、周辺環境(サーバサイド周辺技術等)の進化に合わせて、現在適用している設計パターンそのものを蒸留し、戦略的に進化させ続ける必要があります。問題領域(ドメイン)はどこにでもあるし、それは技術的なフレームワークにも当てはまります。Evans本16章、17章あたりの話です。&lt;/p&gt;

&lt;p&gt;一方で、構築するサービス全体を俯瞰して捉えた場合、クライアントはサーバサイドから見てDTOを橋渡し役として境界が分かれた状況にあります。
現実的な話をすれば、蒸留という行為自体独立して必要に応じてやればいい、やっていくだけという話なのですが、それで結論づけてしまうと元も子もないのと、必要なタイミングで懐刀がないというのはよろしくないですし、クライアントアプリケーションをよりより素早く、より漸進的な設計で形にするヒントが隠されているかもしれません。&lt;/p&gt;

&lt;p&gt;まだ検証段階なのですが(本当はAdvent Calendarに間に合わせたかったけど無理があった)、クライアント設計パターンの1つである所のVIPERを蒸留することでいくつか見えてきた事があるので、書き残しておきます。&lt;/p&gt;

&lt;p&gt;DDD関連用語: 蒸留、宣言的設計、進化する秩序、戦略的設計&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ドメイン駆動設計の実践は実装だけがすべてじゃないよという話</title>
      <link>https://uzzu.github.io/post/ddd-insight.html</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/ddd-insight.html</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/dwango2&#34;&gt;第2のドワンゴ Advent Calendar 2015&lt;/a&gt;の22日目のエントリです。&lt;/p&gt;

&lt;p&gt;Goで&lt;a href=&#34;https://github.com/google/gxui&#34;&gt;gxui&lt;/a&gt;使って2画面ファイラー作ってワショーイしてたんですが、もうちょっと寝かしたいなと思ったので他の事書きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://uzzu.github.io/images/df_screenshot.png&#34; width=&#34;480&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こっちはこっちで追って公開したいですね。&lt;/p&gt;

&lt;p&gt;というわけで本題です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はい。Evans本3部4部ちゃんと理解してない人はやり直しです / “ドメイン駆動設計の間違った方向性” &lt;a href=&#34;http://t.co/tcgxlWVONq&#34;&gt;http://t.co/tcgxlWVONq&lt;/a&gt;&lt;/p&gt;&amp;mdash; ソフトウェア設計おじさん (@uzzu) &lt;a href=&#34;https://twitter.com/uzzu/status/613990950231093248&#34;&gt;June 25, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C#でパターンマッチング</title>
      <link>https://uzzu.github.io/post/switch-case-cs.html</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/switch-case-cs.html</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2014/csharp&#34;&gt;C# Advent Calendar 2014&lt;/a&gt;の23日目のエントリです。
&lt;a href=&#34;http://moririring.hatenablog.com/entry/2014/12/22/002337&#34;&gt;22日目はC#のIntの話でした。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クライアントアプリを書いていると何かとステートフルになり、かつ状態毎の描画もころころ変わります。さらに、WPFの恩恵を受けられないC#でかつ古いmono環境化(決してゲームエンジンは指していませんね?)では、かなり悲しみを背負う事になります。なにも悲しみを背負うので、Rxが再実装されたり、データバインディング機構を再実装したりします。辛い。&lt;/p&gt;

&lt;p&gt;ステートフルかつ何も恩恵が得られないとなれば、無限に繁殖するifとswitch-caseですね。ifはさておき、C#のswitch-caseは非常にシンプルなんですが、シンプルが故にかゆい所に手が届かなくて辛い。
そもそも状態と条件分岐は○○モデルにしましょうよ！的な所で、&lt;a href=&#34;https://gist.github.com/uzzu/5412336c0532508dd17c&#34;&gt;参照型Enum&lt;/a&gt;を作ったりします。JavaのEnumっぽい何かですね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>monoのソースを読み始める話</title>
      <link>https://uzzu.github.io/post/mono-reading.html</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/mono-reading.html</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2014/csharp&#34;&gt;C# Advent Calendar 2014&lt;/a&gt;の10日目のエントリです。
&lt;a href=&#34;http://tech.tanaka733.net/entry/must-load-user-profile-x509certificates2-ctor-with-bytearray-on-aspnet&#34;&gt;9日目はASP.NET/IIS環境での証明書の取り扱いにおけるノウハウ話でした。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;近年は&lt;a href=&#34;http://xamarin.com/&#34;&gt;Xamarin&lt;/a&gt;や&lt;a href=&#34;http://japan.unity3d.com/&#34;&gt;Unity3D&lt;/a&gt;がお盛んで、今年初旬に&lt;a href=&#34;https://mono-ue.github.io/&#34;&gt;mono for UnrealEngine&lt;/a&gt;が発表(2014年12月現在では辛い状態ですが)されたり等、何かとmonoのお世話になることが増えてきたんじゃないでしょうか。かくいう私もお世話になっているうちの1人です。お世話になっている訳ですから、その実装に興味を持ち始める人もいるんじゃないかなと思います。そこで本記事では、とっつきやすそうなところをなんとなく追っていきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ドメインを巡るお話</title>
      <link>https://uzzu.github.io/post/think-domain-driven.html</link>
      <pubDate>Sat, 04 Jan 2014 08:53:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/think-domain-driven.html</guid>
      <description>&lt;p&gt;昨年末にだらだらDCIに関する自分の考えを整理したくて身内で話していて、&lt;br /&gt;
結論としては「DDDとDCIどちらもメンタルモデルに近づけるために機能してる点は変わらない。その先DDDあるいはDCIをフレームワークにするか、あるいは一部に取り入れるのか、そこは取組むドメインによって取捨選択だよね」というところに落ち着いたのだけれど、勿体無い内容な気がするので改めてブログに書くことにする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>流行りのdotfiles運用をゲストOSとホストOS(Windows7)で共有する</title>
      <link>https://uzzu.github.io/post/host-win7-and-guest-os-share-environment-of-dotfiles.html</link>
      <pubDate>Wed, 16 Jan 2013 16:41:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/host-win7-and-guest-os-share-environment-of-dotfiles.html</guid>
      <description>&lt;p&gt;ようやく流行りのdotfiles運用に乗っけました。 dotfiles運用は本当に快適で、幸福に満ち溢れています。
Windowsって本当にかわいいですよね。痒いところに手が届かないところがすごい好きです。現状、日常のほとんどの作業はゲストOSであるところのUbuntu上で行っているので、ホストOSであるWindows7をほとんど触っていないのですが、とはいえ、どうしてもWindows上で作業した方が早いケースがあったり、 Windows上にしかインストールできないソフトウェアがあることがまああるわけで、そういういざという時に最低限の編集が可能が環境がWindows上に存在しない、もしくは差異があるというのはいささか不便であります。&lt;br /&gt;
で、この問題をどうしようかなと調べてたわけですが…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FlexUnit4でStageに依存するテストを書く</title>
      <link>https://uzzu.github.io/post/stage-reference-in-flexunit4.html</link>
      <pubDate>Wed, 09 Jan 2013 13:03:00 +0900</pubDate>
      
      <guid>https://uzzu.github.io/post/stage-reference-in-flexunit4.html</guid>
      <description>&lt;p&gt;FlexUnit4を利用する上でflash.display.Stageに依存する処理のテストを書きたいんだけど、&lt;br /&gt;
TestクラスからどうやってStageオブジェクトを参照したりStageからのイベントを送出したら良いか分からない!&lt;br /&gt;
a)力技な方法と、b)fluintの機能を利用する方法があります。後者をおすすめします。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
