<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uzzu::Blog</title>
    <description>Recent content in Uzzu::Blog</description>
    <link>https://uzzu.co/</link>
    <image>
      <url>https://uzzu.co/images/avatar.png</url>
      <title>Uzzu::Blog</title>
      <link>https://uzzu.co/</link>
    </image><generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Wed, 16 Dec 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://uzzu.co/" rel="self" type="application/rss+xml" />
    <item>
      <title>Less is more</title>
      <link>https://uzzu.co/post/less-is-more.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 16日目の記事です。だいたい言いたいことは言ったような気がしますが、まだ出てくるのかなあ。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/less-is-more.html</guid>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-1216-16T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Layered Architectureの終わり</title>
      <link>https://uzzu.co/post/the-end-of-layered-architecture.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 15日目の記事です。今までわたしは感情がない方だったのでVTuberの配信などをみて泣いたりすると「ああ…自分にも感情があったんだ…。」と喜びを感じていたんですが、どうも年を取ると感情の制御ができなくなってくるみたいな話が最近流れてきて、そういうのもあるのかとなりました。ワザップですかこれ。頑固にはなってないと思います。むしろどんどん柔らかくなっているような気がする。&lt;/p&gt;
&lt;p&gt;この記事にいきなりやってきた人向けですが、これはある意味連載企画なので、&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;間違えて理解しないように最初から読む事をおすすめします&lt;/a&gt;。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/the-end-of-layered-architecture.html</guid>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-1215-15T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>ドメインの学習・認知を加速する為のU理論</title>
      <link>https://uzzu.co/post/learning-by-using-theory-u.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 12日目の記事です。&lt;a href=&#34;https://youtrack.jetbrains.com/issue/JBR-2526&#34;&gt;IntelliJ IDEAのARM Supportのtest buildがきましたね。&lt;/a&gt;いやーうちのMac miniでも早く試したい。逸る気持ちを抑えながらこのブログを書いています。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/learning-by-using-theory-u.html</guid>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-1212-12T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>ドメインを定義づけて問題をアスペクトに分離する、とはどういう意味だったのか</title>
      <link>https://uzzu.co/post/define-domain.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 11日目の記事です。嫌いなブログの冒頭は「TL;DR」です。既に今回のAdvent Calendarで書いたブログでも使ってしまいましたが、本当は3行まとめも嫌いなんですよね。でも実際、現場においても3行でってよく言われます。時代に求められているのだと思います。読まれる文章を目指すためにはトレンドってやつも利用する必要があって、アーキテクチャも同じ様にトレンドというものは考慮しなければなりません。トレンドに乗っかるのもまた人の営み。(この続きはカットされました。)&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/define-domain.html</guid>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-1211-11T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>意思決定マトリクスに時間軸が欲しい</title>
      <link>https://uzzu.co/post/decision-matrix-with-time-axis.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 10日目の記事です。「日曜月曜あいてるじゃん。完走失敗では。」という突っ込みをうけて説明をうっかり忘れていたのですが、日曜月曜はリアル都合で本当に無理なのでノーカンです。ノーカン。なので継続中です。Advent Calendarのルールやら文化はもちろん知っていますがこのAdvent Calendarにおいては日曜月曜はノーカンです。それでも、もし、もし穴が気になるようでしたら、ご参加、お待ちしております！脊髄で何書いてもよいです！別に技術的な話でなくても良いです。それもまたハワイアン。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/decision-matrix-with-time-axis.html</guid>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-1210-10T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>チームでソフトウェアアーキテクチャを育てる</title>
      <link>https://uzzu.co/post/architect-team.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 9日目の記事です。&lt;a href=&#34;https://www.amazon.co.jp/dp/B08KRHDS84/&#34;&gt;Clean Agile&lt;/a&gt;を読み終えました。大変だなあ。自分の働いている環境というのは恵まれているんだなあと思いました。&lt;a href=&#34;https://www.amazon.co.jp/dp/B009SJQYMW&#34;&gt;瑪羅門の家族&lt;/a&gt;も読みました。面白いです。本能寺の変の真相には驚きです。全4巻です。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/architect-team.html</guid>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-129-09T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>大規模開発での意思疎通手段とC4 Model</title>
      <link>https://uzzu.co/post/c4model-for-communication.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 8日目の記事です。Mac miniが届きました。まだ普段使ってる ターミナルエミュレータ &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;kitty&lt;/a&gt; をビルドしてざっと動かしてあーよかったとなった所で、他はなにもやってません。色々試したい気持ちを抑えながら、今このブログを書いています。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/c4model-for-communication.html</guid>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-128-08T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Scalable Contract という考え方</title>
      <link>https://uzzu.co/post/scalable-contract.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 5日目の記事です。&lt;a href=&#34;https://uzzu.co/post/last-responsible-moment.html&#34;&gt;4日目&lt;/a&gt;の続きなので、4日目も読むと伝わるのかなと思います。ところでですが、&lt;a href=&#34;https://www.ogis-ri.co.jp/otc/hiroba/ogisbooks/ObjectDesign.html&#34;&gt;オブジェクトデザイン&lt;/a&gt;は平成に置いていかれた本の中も1、2を争うレベルで影響を受けているし為になる技術書なんですが、電子書籍化もされてないどころかもう出版が止まっており本当に不遇です。同著者が書いた「進化的アーキテクチャ」にエッセンスレベルで僅かに受け継がれているんですが…オブジェクトデザインも電子書籍化されて欲しいんですが…どうかオージス総研様、ご検討の程、宜しくお願い致します。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/scalable-contract.html</guid>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-125-05T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>クライアントアプリケーション開発の技術の進化とLast Responsible Moment</title>
      <link>https://uzzu.co/post/last-responsible-moment.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 4日目の記事です。今日はオンライン飲みってやつがあって、今お酒を飲んでいます。&lt;a href=&#34;https://uzzu.co/post/along-multiple-dimentions.html&#34;&gt;3日目&lt;/a&gt; はちょっとこってりだったかもですし、投稿時間も悪かったし、反省してます。…反省してません。押し付けが厳しい、なんだかこぞって取り繕って丁寧な文章を書いてる量産型な世の中だからこそ、わたしは押し付けられたいし、初期衝動を感じる技術ブログを読みたいなという気持ちで書いています。ドリランド&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/last-responsible-moment.html</guid>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-124-04T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>複数の次元</title>
      <link>https://uzzu.co/post/along-multiple-dimentions.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 3日目の記事です。&lt;a href=&#34;https://uzzu.co/post/write-a-farewell-note.html&#34;&gt;2日目&lt;/a&gt; 読んだ方、今日は何日後に寿命が尽きるものを作りましたか。遺書は書きましたか。その遺書は一旦寝かせておいて、次の作業に移りましょう。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/along-multiple-dimentions.html</guid>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-123-03T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>ソフトウェア設計の際には遺書を書こう</title>
      <link>https://uzzu.co/post/write-a-farewell-note.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 2日目の記事です。ツイートアナリティクスによれば、1日目のブログへのエンゲージメントは32という事だそうです。今確認のためにもう一回開いたので33です。わたしは自分のブログを何回も読み直すので、99%は自分のアクセスでしょう。これまでご愛読頂きありがとうございました。
Advent Calendarの前半では進化的アーキテクチャについて触れてやっていくつもりなので、その為の前提を埋めていきたいと思います。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/write-a-farewell-note.html</guid>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-122-02T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>ハワイアン2020 Introduction</title>
      <link>https://uzzu.co/post/hawaiian2020-intro.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 1日目の記事です。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/hawaiian2020-intro.html</guid>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-121-01T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Kotlinのsealed classとdelegateを使った型遊び</title>
      <link>https://uzzu.co/post/kotlin-sealed-classes-and-delegate.html</link>
      <description>&lt;p&gt;Kotlinのsealed classとdelegateを使った型遊びです。&lt;/p&gt;
&lt;p&gt;例えば以下のような関係のinterfaceがあったとします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; : Model

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Container&lt;/span&gt; : Element {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createComponent&lt;/span&gt;(name: String): Component
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; : Element {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; parent: Container
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本来はComponentを生成する責務をContainerに持たせたくはない(Factoryとして分離するべき)ですが、ContainerにcreateComponentを生やさなければいけない、というケースであるとします。
その上で、Element以下の関係性をsealed classとして表現したい!と思う事があります。
具体的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: String
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; : Model {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Container&lt;/span&gt; : Element() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createComponent&lt;/span&gt;(): Component = Component(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; parent: Container) : Element()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のようにしたい。まだイメージ段階ですので当然ですが、上記のコードはもちろんコンパイルが通りません。
それではやっていきます。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-sealed-classes-and-delegate.html</guid>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-105-05T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>kotlin-main-kts first impression</title>
      <link>https://uzzu.co/post/kotlin-main-kts-first-impression.html</link>
      <description>Kotlin 1.1 からJSR-223をサポートしているのでKotlin scriptingはがんばればできるという状態で、Kotlin 1.3 より kotlin-main-kts artifactがやってきて、1.3.70ではコンパイラ及びIDEでのサポートが行われるようになりましたがmavenCentral以外のmaven repository上にあるartifactの依存解決に失敗するという不具合を抱えており使えず、これが1.4.0-RC3で修正され、ようやく使い始めてみようかなという段階になってきました。
初回実行が遅い、スクリプトのキャッシュが生きている間の実行時間はそこそこ、といったパフォーマンス面の話がありますが、まずは書けなきゃ始まらないのでその辺は承知で気になる方に調べてもらうということでおいといて、書き味がどうなのかという所をだらだらと書きながら見ていました。
先に結論からいうと IDEA で書いている分にはいけそう、といういつものKotlinの感想を持ちました。@file:Repository, @file:DependsOnあたりを書いてるとIDEAが変更を検知してスクリプトの補完が効くよう読み込んでくれて、あとはいつものKotlinを書いているように自動補完してくれるので、いつものKotlin programmingだなあという感じ。
ただ kotlin-main-kts は1.4.0の段階ではartifactの依存関係を探索的に解決してくれないので implementation dependencyで依存解決されているライブラリを利用する際は手前で依存解決をしなければいけないというのがあります。kotlin-main-kts向けのライブラリを開発・配布する際は、api dependency で解決しつつ transitive = true にしてやると利用者側での探索的な依存解決は不要になります。この辺は今後に期待ですね。Gradle Module Metadataまで含めた依存解決やっていくのかと思うとちょっと大変そうだなと思いますが…。
あとは、いわゆる雑なスクリプトを書く際にはファイル操作とか子プロセスの実行とかよくやると思うんですが、Kotlinの場合、Kotlinに無い機能についてはJavaの資産に乗っかる事になります。動くものを作る分には問題ないんですが、どうしても他のスクリプト言語に比べて冗長な記述になってしまう所が出てきます。そういう所をKotlin extensionなりを含むヘルパーライブラリを用意して冗長さを軽減していくと、日頃の業務などで書く雑なスクリプトの言語選択肢にKotlinも挙がってくるんじゃないかなと思いました。
  書いてて冗長だなと思ったらextensionを追加していって、雑なお仕事をシュッとKotlinで解決できるようになりたいですね。</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-main-kts-first-impression.html</guid>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-823-23T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>BintrayにGradle module metadataもアップロードする</title>
      <link>https://uzzu.co/post/bintray-gradle-module-metadata.html</link>
      <description>gradle-bintray-plugin は現在、 Gradle module metadata のアップロードに対応していません。
https://github.com/bintray/gradle-bintray-plugin/issues/229
この issue 上で workaround がいくつか議論されていますが、私は maven-publish を利用する事にしました。 BintrayUploadTask に依存していると、 Kotlin Multiplatform Library 開発において後から build target を追加する際、追加したはずの build target の artifact をアップロードしてくれない、という別の問題も抱えていたためです。
公式の対応を待ちたいですが、 pull requestも放置気味なので、やむを得ず gradle-bintray-plugin に依存せずに maven-publish を利用するようにしました。 
これで後から build target を追加した際も ./gradlew publish で Bintray に公開する事ができ、 Kotlin Multiplatform Library 利用者も kotlinMultiplatform artifact のみを dependencies に記述する( Kotlin Multiplatform Project の場合は commonMain の dependencies に記述する )だけで、後は Gradle が Gradle module metadata を参照しつつ、利用先のアプリケーションの build target に合わせて依存解決してくれるようになります。</description>
      <guid isPermaLink="true">https://uzzu.co/post/bintray-gradle-module-metadata.html</guid>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-812-12T00:00:0000&#43;0900</atom:updated>
      
    </item>
  </channel>
</rss>
