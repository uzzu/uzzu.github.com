<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Uzzu::Blog</title>
    <link>https://uzzu.co/post.html</link>
    <description>Recent content in Posts on Uzzu::Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 16 Feb 2020 15:00:00 +0900</lastBuildDate>
    <atom:link href="https://uzzu.co/post.html" rel="self" type="application/rss+xml" />
    
    <item>
      <title>New Gradle plugin DSLを使用するとビルドエラーになる場合のTIPS</title>
      <link>https://uzzu.co/post/new-gradle-plugin-dsl-tips.html</link>
      <pubDate>Sun, 16 Feb 2020 15:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/new-gradle-plugin-dsl-tips.html</guid>
      <description>&lt;p&gt;Gradle Pluginを導入する際、buildscript dependenciesかnew gradle plugin dslに統一したいですよね。
前者は簡単なので、後者の方向けの記事です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dotenv GradleでGradle build scriptにdotenvを導入する</title>
      <link>https://uzzu.co/post/dotenv-gradle.html</link>
      <pubDate>Thu, 13 Feb 2020 13:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/dotenv-gradle.html</guid>
      <description>&lt;p&gt;一般的に、Gradle ScriptやGradle Plugin上で外部からの設定値を取り扱う際は Gradle PropertiesやCommand-line flags、System Propertiesの仕組みを利用します。それらから参照される &lt;code&gt;gradle.properties&lt;/code&gt; ファイルは、言いなりのままに(誰の?)設定を追加し続けると、秘匿値と秘匿する必要のない値が混在してしまい、加えて近年Gradle Plugin側からビルドに必要なパラメータとしてGradle Propertiesに設定する事を要求されるシーンが増えてきた為、結果的に &lt;code&gt;gradle.propeties&lt;/code&gt; を編集する機会が増えてきて、開くたびに視界に入る秘匿値に溜息をついてきました。秘匿値は分離して管理したい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDKをシュッと切り替える</title>
      <link>https://uzzu.co/post/java-env.html</link>
      <pubDate>Tue, 11 Feb 2020 18:30:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/java-env.html</guid>
      <description>最近よくJavaの実行環境を切り替えるので、以下の雑shell scriptで凌いでいます。
 $ javaenv /Library/Java/JavaVirtualMachines/amazon-corretto-8.jdk/Contents/Home $ javaenv 11 export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home $ javaenv 1.8 export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-8.jdk/Contents/Home  </description>
    </item>
    
    <item>
      <title>Gradle Module Metadata便利</title>
      <link>https://uzzu.co/post/gradle-module-metadata.html</link>
      <pubDate>Wed, 05 Feb 2020 18:30:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/gradle-module-metadata.html</guid>
      <description>&lt;p&gt;Gradle Module Metadataの仕組みに乗っかるとdependenciesの記述作業が減って便利。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why do libraries like Google Guava struggle with POM metadata and what does Gradle Module Metadata offer them?&lt;br&gt;&lt;br&gt;Find out in this new blog post about Gradle 6 dependency management: &lt;a href=&#34;https://t.co/VLdUWK6wSE&#34;&gt;https://t.co/VLdUWK6wSE&lt;/a&gt; &lt;a href=&#34;https://t.co/nsTwLQCx8h&#34;&gt;pic.twitter.com/nsTwLQCx8h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gradle (@gradle) &lt;a href=&#34;https://twitter.com/gradle/status/1220255795394248704?ref_src=twsrc%5Etfw&#34;&gt;January 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://junit.org/junit5/docs/current/release-notes/index.html#release-notes-5.6.0-overall-improvements&#34;&gt;JUnit5.6もサポートしましたね。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin MPPで複数のNativeTarget(iosX64, linux64, etc&amp;hellip;)を対象としたライブラリなりアプリケーションを作成する中で &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; や
 &lt;code&gt;kotlinx-serialization-runtime&lt;/code&gt; の依存関係を記述していく際、複数のNativeTargetが存在するにも関わらず&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;kotlin {
    //
    // 略
    //
    sourceSets {
        //
        // 略
        //
        nativeMain {
            dependsOn commonMain
            dependencies {
                implementation &#39;org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.3-native-mt&#39;
            }
        }
        iosX64Main.dependsOn nativeMain
        linux64Main.dependsOn nativeMain
        //
        // 略
        //
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というように手前で作成したSourseSetに対して依存を記述して、あとはSouceSet同士の依存を解決するだけで、iOSX64やlinux64向けの &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; の依存関係を解決してくれます。&lt;/p&gt;

&lt;p&gt;これには4.10あたりからfeature previewが始まり6.0でデフォルト有効になったGradle Module Metadataの仕組みが利用されています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GradleのPluginManagementの仕組み</title>
      <link>https://uzzu.co/post/new-gradle-plugin-api-management.html</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/new-gradle-plugin-api-management.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.gradle.org/5.2/userguide/plugins.html#sec:plugin_management&#34;&gt;https://docs.gradle.org/5.2/userguide/plugins.html#sec:plugin_management&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.1ぐらいからincubatingな New Gradle Plugin APIのPluginManagementのResolutionStrategyをそろそろ理解する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マルチエフェクターに移行した</title>
      <link>https://uzzu.co/post/multi-effector.html</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/multi-effector.html</guid>
      <description>&lt;p&gt;今まではコンパクトエフェクター使ってたけど、だいたい売ってマルチエフェクターに移行した。初めてのマルチで四苦八苦してる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GroovyBuilderの使い所</title>
      <link>https://uzzu.co/post/gradle-groovy-builder.html</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/gradle-groovy-builder.html</guid>
      <description>&lt;p&gt;Gradle Kotlin DSLで何かと役に立つGroovyBuilderの話です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coroutinesの多重呼び出しの防止</title>
      <link>https://uzzu.co/post/hot-coroutines.html</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/hot-coroutines.html</guid>
      <description>&lt;p&gt;Rxの世界ではHot Observableをよく使っていたけど、Coroutinesでも使いたい。
直近自分には2つの需要があるかなというところ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多重に &lt;code&gt;launch&lt;/code&gt; しない (GUIの連打防止をGUIの実装上でやるのが面倒)&lt;/li&gt;
&lt;li&gt;多重に suspend functionを呼び出したくはないが、結果だけは欲しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで作ってみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>集計したいクライアントログとは</title>
      <link>https://uzzu.co/post/distilling-client-log.html</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/distilling-client-log.html</guid>
      <description>&lt;p&gt;なんなんだ、を考える。
あらゆるクライアントログを一般化する。結論はない。まだまだ考え中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin MPPでのcoroutines test</title>
      <link>https://uzzu.co/post/mpp-coroutines-test-common.html</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/mpp-coroutines-test-common.html</guid>
      <description>&lt;p&gt;そのうちリリースされると思うけど、まだっぽいのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kotlinx.serialization/JSON利用時にkotlinx-serialization pluginを使用しない</title>
      <link>https://uzzu.co/post/kotlin-json-serialization-mini.html</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/kotlin-json-serialization-mini.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;kotlinx.serialization&lt;/a&gt;は書いて字の通りserialize/deserializeライブラリで、Multiplatformサポートと、フォーマットとしてJSON、CBOR、Protobufをサポートしています。バージョンが0系ということでinterfaceに変更が入る可能性はあるけど、まあ使わなければなんとやら。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin Multi Platform Project Boilerplateを作った</title>
      <link>https://uzzu.co/post/kotlin-mpp-boilerplate.html</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/kotlin-mpp-boilerplate.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/uzzu/kotlin-mpp-boilerplate&#34;&gt;https://github.com/uzzu/kotlin-mpp-boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スマフォからの投稿テストも兼ねて、kotlin-mpp-boilerplateを作ったので解説。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>年末年始あれこれ2018/2019</title>
      <link>https://uzzu.co/post/20190103.html</link>
      <pubDate>Thu, 03 Jan 2019 12:33:01 +0900</pubDate>
      
      <guid>https://uzzu.co/post/20190103.html</guid>
      <description>&lt;p&gt;なんとなくここ数年SNSはちょっと距離を置いて、Twitterではほどほどにまともな事を書く生活を送っていたけど、Twitterでほどほどにまともな事を書いても効果が薄いなという当たり前の結論に至った。昔から言ってるんだがーな事が視界に入って届いてないとかで一人で消耗しているとかそういう話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Distilling VIPER pattern</title>
      <link>https://uzzu.co/post/distilling-viper-architecture.html</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/distilling-viper-architecture.html</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2018/ddd&#34;&gt;ドメイン駆動設計 #1 Advent Calendar 2018&lt;/a&gt; 19日目の記事です。&lt;/p&gt;

&lt;p&gt;何かとDDDの話はサーバサイドエンジニアの話として取り上げられます。
それもそのはず、サービスの根幹となるビジネスドメインのロジックはサーバサイド上組まれる事が多い事にあると思います。
ではクライアントサイドは関係ないのかというとそんな事はなくて、Layered Architectureのように部分的にDDDの戦術的なエッセンスを導入する事はさることながら、サーバAPIがGraphQL、RESTful API、CQRS+ESなアーキテクチャであれば同様にそれらに適した設計を検討する必要があります。ましてや、ゲーム開発ではより多角的に全く別のアプローチを取る事があります。
つまり、開発するクライアントそのものの要件、規模、周辺環境(サーバサイド周辺技術等)の進化に合わせて、現在適用している設計パターンそのものを蒸留し、戦略的に進化させ続ける必要があります。問題領域(ドメイン)はどこにでもあるし、それは技術的なフレームワークにも当てはまります。Evans本16章、17章あたりの話です。&lt;/p&gt;

&lt;p&gt;一方で、構築するサービス全体を俯瞰して捉えた場合、クライアントはサーバサイドから見てDTOを橋渡し役として境界が分かれた状況にあります。
現実的な話をすれば、蒸留という行為自体独立して必要に応じてやればいい、やっていくだけという話なのですが、それで結論づけてしまうと元も子もないのと、必要なタイミングで懐刀がないというのはよろしくないですし、クライアントアプリケーションをよりより素早く、より漸進的な設計で形にするヒントが隠されているかもしれません。&lt;/p&gt;

&lt;p&gt;まだ検証段階なのですが(本当はAdvent Calendarに間に合わせたかったけど無理があった)、クライアント設計パターンの1つである所のVIPERを蒸留することでいくつか見えてきた事があるので、書き残しておきます。&lt;/p&gt;

&lt;p&gt;DDD関連用語: 蒸留、宣言的設計、進化する秩序、戦略的設計&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ドメイン駆動設計の実践は実装だけがすべてじゃないよという話</title>
      <link>https://uzzu.co/post/ddd-insight.html</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/ddd-insight.html</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/dwango2&#34;&gt;第2のドワンゴ Advent Calendar 2015&lt;/a&gt;の22日目のエントリです。&lt;/p&gt;

&lt;p&gt;Goで&lt;a href=&#34;https://github.com/google/gxui&#34;&gt;gxui&lt;/a&gt;使って2画面ファイラー作ってワショーイしてたんですが、もうちょっと寝かしたいなと思ったので他の事書きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://uzzu.co/images/df_screenshot.png&#34; width=&#34;480&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こっちはこっちで追って公開したいですね。&lt;/p&gt;

&lt;p&gt;というわけで本題です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はい。Evans本3部4部ちゃんと理解してない人はやり直しです / “ドメイン駆動設計の間違った方向性” &lt;a href=&#34;http://t.co/tcgxlWVONq&#34;&gt;http://t.co/tcgxlWVONq&lt;/a&gt;&lt;/p&gt;&amp;mdash; ソフトウェア設計おじさん (@uzzu) &lt;a href=&#34;https://twitter.com/uzzu/status/613990950231093248&#34;&gt;June 25, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
