<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uzzu::Blog</title>
    <description>Recent content in Uzzu::Blog</description>
    <link>https://uzzu.co/post.html</link>
    <image>
      <url>https://uzzu.co/images/avatar.png</url>
      <title>Uzzu::Blog</title>
      <link>https://uzzu.co/post.html</link>
    </image><generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 08 Dec 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://uzzu.co/post.html" rel="self" type="application/rss+xml" />
    <item>
      <title>大規模開発での意思疎通手段とC4 Model</title>
      <link>https://uzzu.co/post/c4model-for-communication.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 8日目の記事です。Mac miniが届きました。まだ普段使ってる ターミナルエミュレータ &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;kitty&lt;/a&gt; をビルドしてざっと動かしてあーよかったとなった所で、他はなにもやってません。色々試したい気持ちを抑えながら、今このブログを書いています。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/c4model-for-communication.html</guid>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-128-08T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Scalable Contract という考え方</title>
      <link>https://uzzu.co/post/scalable-contract.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 5日目の記事です。&lt;a href=&#34;https://uzzu.co/post/last-responsible-moment.html&#34;&gt;4日目&lt;/a&gt;の続きなので、4日目も読むと伝わるのかなと思います。ところでですが、&lt;a href=&#34;https://www.ogis-ri.co.jp/otc/hiroba/ogisbooks/ObjectDesign.html&#34;&gt;オブジェクトデザイン&lt;/a&gt;は平成に置いていかれた本の中も1、2を争うレベルで影響を受けているし為になる技術書なんですが、電子書籍化もされてないどころかもう出版が止まっており本当に不遇です。同著者が書いた「進化的アーキテクチャ」にエッセンスレベルで僅かに受け継がれているんですが…オブジェクトデザインも電子書籍化されて欲しいんですが…どうかオージス総研様、ご検討の程、宜しくお願い致します。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/scalable-contract.html</guid>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-125-05T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>クライアントアプリケーション開発の技術の進化とLast Responsible Moment</title>
      <link>https://uzzu.co/post/last-responsible-moment.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 4日目の記事です。今日はオンライン飲みってやつがあって、今お酒を飲んでいます。&lt;a href=&#34;https://uzzu.co/post/along-multiple-dimentions.html&#34;&gt;3日目&lt;/a&gt; はちょっとこってりだったかもですし、投稿時間も悪かったし、反省してます。…反省してません。押し付けが厳しい、なんだかこぞって取り繕って丁寧な文章を書いてる量産型な世の中だからこそ、わたしは押し付けられたいし、初期衝動を感じる技術ブログを読みたいなという気持ちで書いています。ドリランド&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/last-responsible-moment.html</guid>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-124-04T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>複数の次元</title>
      <link>https://uzzu.co/post/along-multiple-dimentions.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 3日目の記事です。&lt;a href=&#34;https://uzzu.co/post/write-a-farewell-note.html&#34;&gt;2日目&lt;/a&gt; 読んだ方、今日は何日後に寿命が尽きるものを作りましたか。遺書は書きましたか。その遺書は一旦寝かせておいて、次の作業に移りましょう。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/along-multiple-dimentions.html</guid>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-123-03T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>ソフトウェア設計の際には遺書を書こう</title>
      <link>https://uzzu.co/post/write-a-farewell-note.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 2日目の記事です。ツイートアナリティクスによれば、1日目のブログへのエンゲージメントは32という事だそうです。今確認のためにもう一回開いたので33です。わたしは自分のブログを何回も読み直すので、99%は自分のアクセスでしょう。これまでご愛読頂きありがとうございました。
Advent Calendarの前半では進化的アーキテクチャについて触れてやっていくつもりなので、その為の前提を埋めていきたいと思います。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/write-a-farewell-note.html</guid>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-122-02T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>ハワイアン2020 Introduction</title>
      <link>https://uzzu.co/post/hawaiian2020-intro.html</link>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/5225&#34;&gt;ハワイアンAdvent Calendar 2020&lt;/a&gt; 1日目の記事です。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/hawaiian2020-intro.html</guid>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-121-01T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Kotlinのsealed classとdelegateを使った型遊び</title>
      <link>https://uzzu.co/post/kotlin-sealed-classes-and-delegate.html</link>
      <description>&lt;p&gt;Kotlinのsealed classとdelegateを使った型遊びです。&lt;/p&gt;
&lt;p&gt;例えば以下のような関係のinterfaceがあったとします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; : Model

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Container&lt;/span&gt; : Element {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createComponent&lt;/span&gt;(name: String): Component
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; : Element {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; parent: Container
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本来はComponentを生成する責務をContainerに持たせたくはない(Factoryとして分離するべき)ですが、ContainerにcreateComponentを生やさなければいけない、というケースであるとします。
その上で、Element以下の関係性をsealed classとして表現したい!と思う事があります。
具体的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: String
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; : Model {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Container&lt;/span&gt; : Element() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createComponent&lt;/span&gt;(): Component = Component(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; parent: Container) : Element()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のようにしたい。まだイメージ段階ですので当然ですが、上記のコードはもちろんコンパイルが通りません。
それではやっていきます。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-sealed-classes-and-delegate.html</guid>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-105-05T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>kotlin-main-kts first impression</title>
      <link>https://uzzu.co/post/kotlin-main-kts-first-impression.html</link>
      <description>Kotlin 1.1 からJSR-223をサポートしているのでKotlin scriptingはがんばればできるという状態で、Kotlin 1.3 より kotlin-main-kts artifactがやってきて、1.3.70ではコンパイラ及びIDEでのサポートが行われるようになりましたがmavenCentral以外のmaven repository上にあるartifactの依存解決に失敗するという不具合を抱えており使えず、これが1.4.0-RC3で修正され、ようやく使い始めてみようかなという段階になってきました。
初回実行が遅い、スクリプトのキャッシュが生きている間の実行時間はそこそこ、といったパフォーマンス面の話がありますが、まずは書けなきゃ始まらないのでその辺は承知で気になる方に調べてもらうということでおいといて、書き味がどうなのかという所をだらだらと書きながら見ていました。
先に結論からいうと IDEA で書いている分にはいけそう、といういつものKotlinの感想を持ちました。@file:Repository, @file:DependsOnあたりを書いてるとIDEAが変更を検知してスクリプトの補完が効くよう読み込んでくれて、あとはいつものKotlinを書いているように自動補完してくれるので、いつものKotlin programmingだなあという感じ。
ただ kotlin-main-kts は1.4.0の段階ではartifactの依存関係を探索的に解決してくれないので implementation dependencyで依存解決されているライブラリを利用する際は手前で依存解決をしなければいけないというのがあります。kotlin-main-kts向けのライブラリを開発・配布する際は、api dependency で解決しつつ transitive = true にしてやると利用者側での探索的な依存解決は不要になります。この辺は今後に期待ですね。Gradle Module Metadataまで含めた依存解決やっていくのかと思うとちょっと大変そうだなと思いますが…。
あとは、いわゆる雑なスクリプトを書く際にはファイル操作とか子プロセスの実行とかよくやると思うんですが、Kotlinの場合、Kotlinに無い機能についてはJavaの資産に乗っかる事になります。動くものを作る分には問題ないんですが、どうしても他のスクリプト言語に比べて冗長な記述になってしまう所が出てきます。そういう所をKotlin extensionなりを含むヘルパーライブラリを用意して冗長さを軽減していくと、日頃の業務などで書く雑なスクリプトの言語選択肢にKotlinも挙がってくるんじゃないかなと思いました。
  書いてて冗長だなと思ったらextensionを追加していって、雑なお仕事をシュッとKotlinで解決できるようになりたいですね。</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-main-kts-first-impression.html</guid>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-823-23T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>BintrayにGradle module metadataもアップロードする</title>
      <link>https://uzzu.co/post/bintray-gradle-module-metadata.html</link>
      <description>gradle-bintray-plugin は現在、 Gradle module metadata のアップロードに対応していません。
https://github.com/bintray/gradle-bintray-plugin/issues/229
この issue 上で workaround がいくつか議論されていますが、私は maven-publish を利用する事にしました。 BintrayUploadTask に依存していると、 Kotlin Multiplatform Library 開発において後から build target を追加する際、追加したはずの build target の artifact をアップロードしてくれない、という別の問題も抱えていたためです。
公式の対応を待ちたいですが、 pull requestも放置気味なので、やむを得ず gradle-bintray-plugin に依存せずに maven-publish を利用するようにしました。 
これで後から build target を追加した際も ./gradlew publish で Bintray に公開する事ができ、 Kotlin Multiplatform Library 利用者も kotlinMultiplatform artifact のみを dependencies に記述する( Kotlin Multiplatform Project の場合は commonMain の dependencies に記述する )だけで、後は Gradle が Gradle module metadata を参照しつつ、利用先のアプリケーションの build target に合わせて依存解決してくれるようになります。</description>
      <guid isPermaLink="true">https://uzzu.co/post/bintray-gradle-module-metadata.html</guid>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-812-12T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>New Gradle plugin DSLを使用するとビルドエラーになる場合のTIPS</title>
      <link>https://uzzu.co/post/new-gradle-plugin-dsl-tips.html</link>
      <description>&lt;p&gt;Gradle Pluginを導入する際、buildscript dependenciesかnew gradle plugin dslに統一したいですよね。
前者は簡単なので、後者の方向けの記事です。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/new-gradle-plugin-dsl-tips.html</guid>
      <pubDate>Sun, 16 Feb 2020 15:00:00 +0900</pubDate>
      <atom:updated>2020-216-16T15:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Dotenv GradleでGradle build scriptにdotenvを導入する</title>
      <link>https://uzzu.co/post/dotenv-gradle.html</link>
      <description>&lt;p&gt;一般的に、Gradle ScriptやGradle Plugin上で外部からの設定値を取り扱う際は Gradle PropertiesやCommand-line flags、System Propertiesの仕組みを利用します。それらから参照される &lt;code&gt;gradle.properties&lt;/code&gt; ファイルは、言いなりのままに(誰の?)設定を追加し続けると、秘匿値と秘匿する必要のない値が混在してしまい、加えて近年Gradle Plugin側からビルドに必要なパラメータとしてGradle Propertiesに設定する事を要求されるシーンが増えてきた為、結果的に &lt;code&gt;gradle.propeties&lt;/code&gt; を編集する機会が増えてきて、開くたびに視界に入る秘匿値に溜息をついてきました。秘匿値は分離して管理したい。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/dotenv-gradle.html</guid>
      <pubDate>Thu, 13 Feb 2020 13:00:00 +0900</pubDate>
      <atom:updated>2020-213-13T13:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>JDKをシュッと切り替える</title>
      <link>https://uzzu.co/post/java-env.html</link>
      <description>最近よくJavaの実行環境を切り替えるので、以下の雑shell scriptで凌いでいます。
 $ javaenv /Library/Java/JavaVirtualMachines/amazon-corretto-8.jdk/Contents/Home $ javaenv 11 export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home $ javaenv 1.8 export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-8.jdk/Contents/Home </description>
      <guid isPermaLink="true">https://uzzu.co/post/java-env.html</guid>
      <pubDate>Tue, 11 Feb 2020 18:30:00 +0900</pubDate>
      <atom:updated>2020-211-11T18:30:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Gradle Module Metadata便利</title>
      <link>https://uzzu.co/post/gradle-module-metadata.html</link>
      <description>&lt;p&gt;Gradle Module Metadataの仕組みに乗っかるとdependenciesの記述作業が減って便利。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why do libraries like Google Guava struggle with POM metadata and what does Gradle Module Metadata offer them?&lt;br&gt;&lt;br&gt;Find out in this new blog post about Gradle 6 dependency management: &lt;a href=&#34;https://t.co/VLdUWK6wSE&#34;&gt;https://t.co/VLdUWK6wSE&lt;/a&gt; &lt;a href=&#34;https://t.co/nsTwLQCx8h&#34;&gt;pic.twitter.com/nsTwLQCx8h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gradle (@gradle) &lt;a href=&#34;https://twitter.com/gradle/status/1220255795394248704?ref_src=twsrc%5Etfw&#34;&gt;January 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://junit.org/junit5/docs/current/release-notes/index.html#release-notes-5.6.0-overall-improvements&#34;&gt;JUnit5.6もサポートしましたね。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kotlin MPPで複数のNativeTarget(iosX64, linux64, etc&amp;hellip;)を対象としたライブラリなりアプリケーションを作成する中で &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; や
&lt;code&gt;kotlinx-serialization-runtime&lt;/code&gt; の依存関係を記述していく際、複数のNativeTargetが存在するにも関わらず&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;kotlin &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sourceSets &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        nativeMain &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            dependsOn commonMain
            dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.3-native-mt&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        iosX64Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dependsOn&lt;/span&gt; nativeMain
        linux64Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dependsOn&lt;/span&gt; nativeMain
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というように手前で作成したSourseSetに対して依存を記述して、あとはSouceSet同士の依存を解決するだけで、iOSX64やlinux64向けの &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; の依存関係を解決してくれます。&lt;/p&gt;
&lt;p&gt;これには4.10あたりからfeature previewが始まり6.0でデフォルト有効になったGradle Module Metadataの仕組みが利用されています。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/gradle-module-metadata.html</guid>
      <pubDate>Wed, 05 Feb 2020 18:30:00 +0900</pubDate>
      <atom:updated>2020-25-05T18:30:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>GradleのPluginManagementの仕組み</title>
      <link>https://uzzu.co/post/new-gradle-plugin-api-management.html</link>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.gradle.org/5.2/userguide/plugins.html#sec:plugin_management&#34;&gt;https://docs.gradle.org/5.2/userguide/plugins.html#sec:plugin_management&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.1ぐらいからincubatingな New Gradle Plugin APIのPluginManagementのResolutionStrategyをそろそろ理解する。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/new-gradle-plugin-api-management.html</guid>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0900</pubDate>
      <atom:updated>2019-216-16T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>マルチエフェクターに移行した</title>
      <link>https://uzzu.co/post/multi-effector.html</link>
      <description>&lt;p&gt;今まではコンパクトエフェクター使ってたけど、だいたい売ってマルチエフェクターに移行した。初めてのマルチで四苦八苦してる。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/multi-effector.html</guid>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0900</pubDate>
      <atom:updated>2019-23-03T00:00:0000&#43;0900</atom:updated>
      
    </item>
  </channel>
</rss>
