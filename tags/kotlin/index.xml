<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uzzu::Blog</title>
    <description>Recent content in Uzzu::Blog</description>
    <link>https://uzzu.co/tags/kotlin.html</link>
    <image>
      <url>https://uzzu.co/images/avatar.jpg</url>
      <title>Uzzu::Blog</title>
      <link>https://uzzu.co/tags/kotlin.html</link>
    </image><generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 23 Aug 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://uzzu.co/tags/kotlin.html" rel="self" type="application/rss+xml" />
    <item>
      <title>kotlin-main-kts first impression</title>
      <link>https://uzzu.co/post/kotlin-main-kts-first-impression.html</link>
      <description>Kotlin 1.1 からJSR-223をサポートしているのでKotlin scriptingはがんばればできるという状態で、Kotlin 1.3 より kotlin-main-kts artifactがやってきて、1.3.70ではコンパイラ及びIDEでのサポートが行われるようになりましたがmavenCentral以外のmaven repository上になるartifactの依存解決に失敗するという不具合を抱えており使えず、これが1.4.0-RC3で修正され、ようやく使い始めてみようかなという段階になってきました。
初回実行が遅い、スクリプトのキャッシュが生きている間の実行時間はそこそこ、といったパフォーマンス面の話がありますが、まずは書けなきゃ始まらないのでその辺は承知で気になる方に調べてもらうということでおいといて、書き味がどうなのかという所をだらだらと書きながら見ていました。
先に結論からいうと IDEA で書いている分にはいけそう、といういつものKotlinの感想を持ちました。@file:Repository, @file:DependsOnあたりを書いてるとIDEAが変更を検知してスクリプトの補完が効くよう読み込んでくれて、あとはいつものKotlinを書いているように自動補完してくれるので、いつものKotlin programmingだなあという感じ。
ただ kotlin-main-kts は1.4.0の段階ではartifactの依存関係を探索的に解決してくれないので implementation dependencyで依存解決されているライブラリを利用する際は手前で依存解決をしなければいけないというのがあります。kotlin-main-kts向けのライブラリを開発・配布する際は、api dependency で解決しつつ transitive = true にしてやると利用者側での探索的な依存解決は不要になります。この辺は今後に期待ですね。Gradle Module Metadataまで含めた依存解決やっていくのかと思うとちょっと大変そうだなと思いますが…。
あとは、いわゆる雑なスクリプトを書く際にはファイル操作とか子プロセスの実行とかよくやると思うんですが、Kotlinの場合、Kotlinに無い機能についてはJavaの資産に乗っかる事になります。動くものを作る分には問題ないんですが、どうしても他のスクリプト言語に比べて冗長な記述になってしまう所が出てきます。そういう所をKotlin extensionなりを含むヘルパーライブラリを用意して冗長さを軽減していくと、日頃の業務などで書く雑なスクリプトの言語選択肢にKotlinも挙がってくるんじゃないかなと思いました。
  書いてて冗長だなと思ったらextensionを追加していって、雑なお仕事をシュッとKotlinで解決できるようになりたいですね。</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-main-kts-first-impression.html</guid>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0900</pubDate>
      <atom:updated>2020-823-23T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Gradle Module Metadata便利</title>
      <link>https://uzzu.co/post/gradle-module-metadata.html</link>
      <description>&lt;p&gt;Gradle Module Metadataの仕組みに乗っかるとdependenciesの記述作業が減って便利。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why do libraries like Google Guava struggle with POM metadata and what does Gradle Module Metadata offer them?&lt;br&gt;&lt;br&gt;Find out in this new blog post about Gradle 6 dependency management: &lt;a href=&#34;https://t.co/VLdUWK6wSE&#34;&gt;https://t.co/VLdUWK6wSE&lt;/a&gt; &lt;a href=&#34;https://t.co/nsTwLQCx8h&#34;&gt;pic.twitter.com/nsTwLQCx8h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gradle (@gradle) &lt;a href=&#34;https://twitter.com/gradle/status/1220255795394248704?ref_src=twsrc%5Etfw&#34;&gt;January 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://junit.org/junit5/docs/current/release-notes/index.html#release-notes-5.6.0-overall-improvements&#34;&gt;JUnit5.6もサポートしましたね。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kotlin MPPで複数のNativeTarget(iosX64, linux64, etc&amp;hellip;)を対象としたライブラリなりアプリケーションを作成する中で &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; や
&lt;code&gt;kotlinx-serialization-runtime&lt;/code&gt; の依存関係を記述していく際、複数のNativeTargetが存在するにも関わらず&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;kotlin &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sourceSets &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        nativeMain &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            dependsOn commonMain
            dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.3-native-mt&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        iosX64Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dependsOn&lt;/span&gt; nativeMain
        linux64Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dependsOn&lt;/span&gt; nativeMain
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というように手前で作成したSourseSetに対して依存を記述して、あとはSouceSet同士の依存を解決するだけで、iOSX64やlinux64向けの &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; の依存関係を解決してくれます。&lt;/p&gt;
&lt;p&gt;これには4.10あたりからfeature previewが始まり6.0でデフォルト有効になったGradle Module Metadataの仕組みが利用されています。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/gradle-module-metadata.html</guid>
      <pubDate>Wed, 05 Feb 2020 18:30:00 +0900</pubDate>
      <atom:updated>2020-25-05T18:30:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Coroutinesの多重呼び出しの防止</title>
      <link>https://uzzu.co/post/hot-coroutines.html</link>
      <description>&lt;p&gt;Rxの世界ではHot Observableをよく使っていたけど、Coroutinesでも使いたい。
直近自分には2つの需要があるかなというところ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多重に &lt;code&gt;launch&lt;/code&gt; しない (GUIの連打防止をGUIの実装上でやるのが面倒)&lt;/li&gt;
&lt;li&gt;多重に suspend functionを呼び出したくはないが、結果だけは欲しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけで作ってみました。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/hot-coroutines.html</guid>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0900</pubDate>
      <atom:updated>2019-116-16T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Kotlin MPPでのcoroutines test</title>
      <link>https://uzzu.co/post/mpp-coroutines-test-common.html</link>
      <description>&lt;p&gt;そのうちリリースされると思うけど、まだっぽいのでメモ。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/mpp-coroutines-test-common.html</guid>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0900</pubDate>
      <atom:updated>2019-110-10T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>kotlinx.serialization/JSON利用時にkotlinx-serialization pluginを使用しない</title>
      <link>https://uzzu.co/post/kotlin-json-serialization-mini.html</link>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;kotlinx.serialization&lt;/a&gt;は書いて字の通りserialize/deserializeライブラリで、Multiplatformサポートと、フォーマットとしてJSON、CBOR、Protobufをサポートしています。バージョンが0系ということでinterfaceに変更が入る可能性はあるけど、まあ使わなければなんとやら。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-json-serialization-mini.html</guid>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0900</pubDate>
      <atom:updated>2019-15-05T00:00:0000&#43;0900</atom:updated>
      
    </item>
    <item>
      <title>Kotlin Multi Platform Project Boilerplateを作った</title>
      <link>https://uzzu.co/post/kotlin-mpp-boilerplate.html</link>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/uzzu/kotlin-mpp-boilerplate&#34;&gt;https://github.com/uzzu/kotlin-mpp-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スマフォからの投稿テストも兼ねて、kotlin-mpp-boilerplateを作ったので解説。&lt;/p&gt;</description>
      <guid isPermaLink="true">https://uzzu.co/post/kotlin-mpp-boilerplate.html</guid>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0900</pubDate>
      <atom:updated>2019-14-04T00:00:0000&#43;0900</atom:updated>
      
    </item>
  </channel>
</rss>
