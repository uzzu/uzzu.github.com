<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Uzzu::Blog</title>
    <link>https://uzzu.co/tags/kotlin.html</link>
    <description>Recent content in Kotlin on Uzzu::Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Wed, 05 Feb 2020 00:00:00 +1830</lastBuildDate>
    <atom:link href="/tags/kotlin.html" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gradle Module MetaData便利</title>
      <link>https://uzzu.co/post/gradle-module-metadata.html</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +1830</pubDate>
      
      <guid>https://uzzu.co/post/gradle-module-metadata.html</guid>
      <description>&lt;p&gt;Gradle Module Metadataの仕組みに乗っかるとdependenciesの記述作業が減って便利。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why do libraries like Google Guava struggle with POM metadata and what does Gradle Module Metadata offer them?&lt;br&gt;&lt;br&gt;Find out in this new blog post about Gradle 6 dependency management: &lt;a href=&#34;https://t.co/VLdUWK6wSE&#34;&gt;https://t.co/VLdUWK6wSE&lt;/a&gt; &lt;a href=&#34;https://t.co/nsTwLQCx8h&#34;&gt;pic.twitter.com/nsTwLQCx8h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gradle (@gradle) &lt;a href=&#34;https://twitter.com/gradle/status/1220255795394248704?ref_src=twsrc%5Etfw&#34;&gt;January 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://junit.org/junit5/docs/current/release-notes/index.html#release-notes-5.6.0-overall-improvements&#34;&gt;JUnit5.6もサポートしましたね。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin MPPで複数のNativeTarget(iosX64, linux64, etc&amp;hellip;)を対象としたライブラリなりアプリケーションを作成する中で &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; や
 &lt;code&gt;kotlinx-serialization-runtime&lt;/code&gt; の依存関係を記述していく際、複数のNativeTargetが存在するにも関わらず&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;kotlin {
    //
    // 略
    //
    sourceSets {
        //
        // 略
        //
        nativeMain {
            dependsOn commonMain
            dependencies {
                implementation &#39;org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.3-native-mt&#39;
            }
        }
        iosX64Main.dependsOn nativeMain
        linux64Main.dependsOn nativeMain
        //
        // 略
        //
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というように手前で作成したSourseSetに対して依存を記述して、あとはSouceSet同士の依存を解決するだけで、iOSX64やlinux64向けの &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; の依存関係を解決してくれます。&lt;/p&gt;

&lt;p&gt;これには4.10あたりからfeature previewが始まり6.0でデフォルト有効になったGradle Module Metadataの仕組みが利用されています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coroutinesの多重呼び出しの防止</title>
      <link>https://uzzu.co/post/hot-coroutines.html</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/hot-coroutines.html</guid>
      <description>&lt;p&gt;Rxの世界ではHot Observableをよく使っていたけど、Coroutinesでも使いたい。
直近自分には2つの需要があるかなというところ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多重に &lt;code&gt;launch&lt;/code&gt; しない (GUIの連打防止をGUIの実装上でやるのが面倒)&lt;/li&gt;
&lt;li&gt;多重に suspend functionを呼び出したくはないが、結果だけは欲しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで作ってみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin MPPでのcoroutines test</title>
      <link>https://uzzu.co/post/mpp-coroutines-test-common.html</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/mpp-coroutines-test-common.html</guid>
      <description>&lt;p&gt;そのうちリリースされると思うけど、まだっぽいのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kotlinx.serialization/JSON利用時にkotlinx-serialization pluginを使用しない</title>
      <link>https://uzzu.co/post/kotlin-json-serialization-mini.html</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/kotlin-json-serialization-mini.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;kotlinx.serialization&lt;/a&gt;は書いて字の通りserialize/deserializeライブラリで、Multiplatformサポートと、フォーマットとしてJSON、CBOR、Protobufをサポートしています。バージョンが0系ということでinterfaceに変更が入る可能性はあるけど、まあ使わなければなんとやら。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin Multi Platform Project Boilerplateを作った</title>
      <link>https://uzzu.co/post/kotlin-mpp-boilerplate.html</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://uzzu.co/post/kotlin-mpp-boilerplate.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/uzzu/kotlin-mpp-boilerplate&#34;&gt;https://github.com/uzzu/kotlin-mpp-boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スマフォからの投稿テストも兼ねて、kotlin-mpp-boilerplateを作ったので解説。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
